
&НаКлиенте
Процедура Команда1(Команда)
	ЗагрузитьПлатежкиЕФС();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОшибочные(Команда)
	ЗагрузитьОшибочныеПлатежки();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСправочники(Команда)
	ЗагрузитьСправочникиЕФС();
КонецПроцедуры

&НаКлиенте
Процедура ПодрузитьДоговорыВебСервер(Команда)
	ЗагрузитьДоговорыВебСервер();
КонецПроцедуры

#Область Обмен

#Область ДанныеПодключения

Функция ПарольСКЛ()
	//Возврат "e1OGyXML5s";
	Возврат Константы.cdw_ПарольСКЛ.Получить();
КонецФункции

Функция ПользовательСКЛ()
	//Возврат "CDW_test_reader";
	Возврат Константы.cdw_ПользовательСКЛ.Получить();
КонецФункции

Функция БазаСКЛ()
//Возврат "PIK.MDS.Database_DEV";	
	Возврат Константы.cdw_БазаДанныхСКЛ.Получить();

КонецФункции

Функция СерверСКЛ()
//Возврат "mob01tst\bi";
	Возврат Константы.cdw_СерверСКЛ.Получить();

КонецФункции

Функция ПолучитьСтрокуПодключения()
	
	Возврат  "Provider=SQLOLEDB.1;Password="""+ПарольСКЛ()+""";Persist Security Info=True;User ID="+ПользовательСКЛ()+";Initial Catalog="+БазаСКЛ()+";Data Source="+СерверСКЛ();
	
КонецФункции	

Функция КолЗаписейСКЛ(ОграничениеТрафика)

	Если ОграничениеТрафика = 0 Тогда 
		КолЗаписей = "";
	иначе	
		КолЗаписей = "TOP ("+Формат(ОграничениеТрафика,"ЧРД=.; ЧН=; ЧГ=0") +")";
	КонецЕсли;
	
	Возврат КолЗаписей;
	
КонецФункции	

Функция ПолучитьКодыУзлов()

	Массив = Новый Массив;
	Массив.Добавить("РИ20");
	Возврат Массив;
	
КонецФункции	
	
#КонецОбласти

#Область ВспомогательныеФункцииДляОбмена

Функция ПолучитьОграничениеТрафика() 
	ОграничениеТрафика = Константы.пик_ОрганичениеКоличестваЗагруженныхОбъектов.Получить();
	Если ОграничениеТрафика = 0 Тогда
		ОграничениеТрафика = 1000;
	КонецЕсли;	
	Возврат ОграничениеТрафика; 
КонецФункции	

Функция ПолучитьОрганизацииДляЗагрузки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетнаяПолитикаСрезПоследних.Организация КАК Организация,
		|	УчетнаяПолитикаСрезПоследних.Организация.Guid КАК Guid
		|ИЗ
		|	РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитикаСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции	

Функция ПоискДокумента(ИмяТипа1С, Guid1C)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПоиска.Ссылка КАК Ссылка,
		|	ДокументПоиска.Проведен КАК Проведен
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК ДокументПоиска
		|ГДЕ
		|	ДокументПоиска.Guid = &Guid";
	
	Запрос.Текст  = СтрЗаменить(Запрос.Текст, "Документ.СписаниеСРасчетногоСчета" ,  ИмяТипа1С);
	Запрос.УстановитьПараметр("Guid",Guid1C); 
	Если Guid1C = "" тогда 
		Запрос.Текст  = СтрЗаменить(Запрос.Текст, "СправочникПоиска.Guid = &Guid" ,  "Ложь");
	КонецЕсли;	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
	
КонецФункции	

Функция ПоискСправочника(ИмяТипа1С, Guid1C, ИмяВнешнейТаблицы = "", ConnectionSQL=Неопределено)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ссылка");
	Если Guid1C = "" тогда 
		Возврат ТЗ;
	КонецЕсли;	
	
	Если ИмяВнешнейТаблицы <> "" Тогда 
		// нет 1с гуида, поэтому тащим его из таблицы
		ТЗ = СформироватьиВыполнитьSELECTЗапросSQL(ИмяВнешнейТаблицы, Новый Структура("Guid1C",Guid1C),  Новый Структура("Id",""), ConnectionSQL); 	
		Если ТЗ.Количество() = 0 Тогда 
			Возврат ТЗ;
		Иначе
			Guid1C = ТЗ[0].Guid1C;
		КонецЕсли;	
		
	КонецЕсли;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникПоиска.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.пик_КонтрагентыКонсолидированные КАК СправочникПоиска
		|ГДЕ
		|	СправочникПоиска.Guid = &Guid";
	
	Запрос.Текст  = СтрЗаменить(Запрос.Текст, "Справочник.пик_КонтрагентыКонсолидированные" ,  ИмяТипа1С);
	Запрос.УстановитьПараметр("Guid",Guid1C); 
	Если Guid1C = "" тогда 
		Запрос.Текст  = СтрЗаменить(Запрос.Текст, "СправочникПоиска.Guid = &Guid" ,  "Ложь");
	КонецЕсли;	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Если РезультатЗапроса.Пустой() Тогда 
		НовИмяТипа = СтрЗаменить(ИмяТипа1С, "Справочник.","");
		
		Ссылка = Справочники[НовИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(Guid1C));
		Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
			НовСтрока = ТЗ.Добавить();	
			НовСтрока.ссылка = Ссылка;
		КонецЕсли;
	Иначе	
		ТЗ = РезультатЗапроса.Выгрузить();
	КонецЕсли; 	
	Возврат ТЗ;	
	
КонецФункции	

Функция ПоискПеречисления(ИмяТипа1С, ID, ConnectionSQL)

	Если ID = 0 тогда
		Возврат Неопределено;
	КонецЕсли;
	ТЗПеречисление = СформироватьиВыполнитьSELECTЗапросSQL("cdw.Enum",Новый Структура("Name",""),  Новый Структура("ID",ID) ,  ConnectionSQL);
	
	Если ТЗПеречисление.Количество() <> 0 Тогда
		
		Возврат ПредопределенноеЗначение(ИмяТипа1С+"."+ТЗПеречисление[0].Name);
		
	КонецЕсли;	
	
КонецФункции	
	
Функция НайтиКонтрагентаПоКонсолидированному(КСК)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.пик_КСК = &КонтрагентКСК";
	
	Запрос.УстановитьПараметр("КонтрагентКСК", КСК);
	
	Реультат = Запрос.Выполнить();
	
	Выборка = Реультат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Контрагент1С = Справочники.Контрагенты.СоздатьЭлемент();
		Справочники.пик_КонтрагентыКонсолидированные.ОбновитьКонтрагента1С(Контрагент1С, КСК);
		Возврат Контрагент1С.Ссылка;
	КонецЕсли;

	
КонецФункции

Функция НайтиЛокальныйДоговорКонтрагента(Организация, пик_КонтрагентКонсолидированный, пик_ДоговорКонтрагентаКонсолидированный, Контрагент)

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пик_КонтрагентыВСоставеПериметраСрезПоследних.Контрагент КАК Контрагент,
		|	пик_ДоговорыКонтрагентовКонсолидированныеКонтрагенты.КатегорияДоговора КАК КатегорияДоговора,
		|	пик_ДоговорыКонтрагентовКонсолидированныеКонтрагенты.Роль КАК Роль
		|ПОМЕСТИТЬ ВТКСД
		|ИЗ
		|	Справочник.пик_ДоговорыКонтрагентовКонсолидированные.Контрагенты КАК пик_ДоговорыКонтрагентовКонсолидированныеКонтрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.пик_КонтрагентыВСоставеПериметра.СрезПоследних КАК пик_КонтрагентыВСоставеПериметраСрезПоследних
		|		ПО (пик_КонтрагентыВСоставеПериметраСрезПоследних.Организация = &Организация)
		|			И пик_ДоговорыКонтрагентовКонсолидированныеКонтрагенты.Контрагент = пик_КонтрагентыВСоставеПериметраСрезПоследних.Контрагент
		|ГДЕ
		|	пик_ДоговорыКонтрагентовКонсолидированныеКонтрагенты.Ссылка = &КСД
		|	И пик_ДоговорыКонтрагентовКонсолидированныеКонтрагенты.Контрагент <> &КСК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	пик_КатегорияДоговоровКСДВидыРасчетов.ВидРасчетов КАК ВидРасчетов,
		|	ВТКСД.КатегорияДоговора КАК КатегорияДоговора,
		|	ВТКСД.Роль КАК Роль
		|ПОМЕСТИТЬ ВидыРасчПоКатегориям
		|ИЗ
		|	ВТКСД КАК ВТКСД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.пик_КатегорияДоговоровКСД.ВидыРасчетов КАК пик_КатегорияДоговоровКСДВидыРасчетов
		|		ПО ВТКСД.КатегорияДоговора = пик_КатегорияДоговоровКСДВидыРасчетов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРасчПоКатегориям.ВидРасчетов КАК ВидРасчетов,
		|	ВидыРасчПоКатегориям.КатегорияДоговора КАК КатегорияДоговора,
		|	ВидыРасчПоКатегориям.Роль КАК Роль,
		|	пик_ОсновныеВидыРасчетовПоКатегориям.Роль КАК Роль1
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.пик_ОсновныеВидыРасчетовПоКатегориям КАК пик_ОсновныеВидыРасчетовПоКатегориям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыРасчПоКатегориям КАК ВидыРасчПоКатегориям
		|		ПО пик_ОсновныеВидыРасчетовПоКатегориям.ВидРасчета = ВидыРасчПоКатегориям.ВидРасчетов
		|			И пик_ОсновныеВидыРасчетовПоКатегориям.Категория = ВидыРасчПоКатегориям.КатегорияДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ВидРасчетов КАК ВидРасчетов
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.Роль = ВТ.Роль1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ.ВидРасчетов
		|ИЗ
		|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("КСД", пик_ДоговорКонтрагентаКонсолидированный);
	Запрос.УстановитьПараметр("КСК", пик_КонтрагентКонсолидированный);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// создаем локальный договор
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация", Организация);
		
		ПараметрыОтбора.Вставить("Владелец"	  , Контрагент );
		ПараметрыОтбора.Вставить("ВидВзаиморасчетов", ВыборкаДетальныеЗаписи.ВидРасчетов);
		ПараметрыОтбора.Вставить("КСД", пик_ДоговорКонтрагентаКонсолидированный);
		
		РезультатПоиска = пик_РаботаСКонсолидированнымиДоговорами.ПолучитьЛокальныйДоговорПоПараметрам(ПараметрыОтбора, Истина);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка()	;	
		Иначе
			Результат = РезультатПоиска[0];
		КонецЕсли;
		
	Иначе
		Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка()	;	
	КонецЕсли;
	
	Возврат Результат;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	пик_РегистрацияДоговоровПоВидамРасчетов.КлючВыбораДоговора КАК КлючВыбораДоговора,
	//	|	пик_РегистрацияДоговоровПоВидамРасчетов.ВидРасчетов КАК ВидРасчетов,
	//	|	ВЫБОР
	//	|		КОГДА пик_РегистрацияДоговоровПоВидамРасчетов.КлючВыбораДоговора ССЫЛКА Справочник.ДоговорыКонтрагентов
	//	|			ТОГДА 0
	//	|		ИНАЧЕ 1
	//	|	КОНЕЦ КАК Порядок
	//	|ИЗ
	//	|	РегистрСведений.пик_РегистрацияДоговоровПоВидамРасчетов КАК пик_РегистрацияДоговоровПоВидамРасчетов
	//	|ГДЕ
	//	|	пик_РегистрацияДоговоровПоВидамРасчетов.Организация = &Организация
	//	|	И пик_РегистрацияДоговоровПоВидамРасчетов.ДоговорКонсолидированный = &ДоговорКонсолидированный
	//	|	И пик_РегистрацияДоговоровПоВидамРасчетов.КонтрагентКонсолидированный = &КонтрагентКонсолидированный
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Порядок";
	//
	//Запрос.УстановитьПараметр("ДоговорКонсолидированный", пик_ДоговорКонтрагентаКонсолидированный);
	//Запрос.УстановитьПараметр("КонтрагентКонсолидированный", пик_КонтрагентКонсолидированный);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//
	//	Если ВыборкаДетальныеЗаписи.Порядок = 0 Тогда
	//		Возврат  ВыборкаДетальныеЗаписи.КлючВыбораДоговора;
	//	Иначе
	//		// создаем локальный договор
	//		ПараметрыОтбора = Новый Структура;
	//		ПараметрыОтбора.Вставить("Организация", Организация);
	//		
	//		ПараметрыОтбора.Вставить("Владелец"	  , Контрагент );
	//		ПараметрыОтбора.Вставить("ВидВзаиморасчетов", ВыборкаДетальныеЗаписи.ВидРасчетов);
	//		ПараметрыОтбора.Вставить("КСД", пик_ДоговорКонтрагентаКонсолидированный);
	//		
	//		РезультатПоиска = пик_РаботаСКонсолидированнымиДоговорами.ПолучитьЛокальныйДоговорПоПараметрам(ПараметрыОтбора, Истина);
	//		
	//		Если РезультатПоиска.Количество() = 0 Тогда
	//			Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка()	;	
	//		Иначе
	//			Результат = РезультатПоиска[0];
	//		КонецЕсли;
	//		
	//		Возврат Результат;
	//		
	//	КонецЕсли;
	//Иначе
	//	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();		
	//КонецЕсли;	
	
КонецФункции 	

Функция ПолучитьЛокальныйБС(БСКонтрагентаКонс, Владелец)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.пик_БанковскиеСчетаКонсолидированные = &пик_БанковскиеСчетаКонсолидированные
		|	И БанковскиеСчета.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("пик_БанковскиеСчетаКонсолидированные", БСКонтрагентаКонс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе	
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;	

	
КонецФункции 	

#КонецОбласти  

#область РегистрыДляОбмена

Функция ПолучитьМаксимальнуюВерсию(ИмяТипа1С, Система, Организация)

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пик_МеткиОбъектовЗагруженныхПоследними.МеткаОбъектаЗагруженногоПоследним КАК МеткаОбъектаЗагруженногоПоследним
		|ИЗ
		|	РегистрСведений.пик_МеткиОбъектовЗагруженныхПоследними КАК пик_МеткиОбъектовЗагруженныхПоследними
		|ГДЕ
		|	пик_МеткиОбъектовЗагруженныхПоследними.Система = &Система
		|	И пик_МеткиОбъектовЗагруженныхПоследними.ИмяТипа1С = &ИмяТипа1С
		|	И пик_МеткиОбъектовЗагруженныхПоследними.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ИмяТипа1С", ИмяТипа1С);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Система", Система);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.МеткаОбъектаЗагруженногоПоследним;
	Иначе	
		Возврат 0;
	КонецЕсли;		
	
КонецФункции 	

Процедура ЗаписатьНовуюМаксВерсию(ИмяТипа1С, Система, Организация, МеткаОбъектаЗагруженногоПоследним)

	Запись = РегистрыСведений.пик_МеткиОбъектовЗагруженныхПоследними.СоздатьМенеджерЗаписи();
	
	Запись.ИмяТипа1С = ИмяТипа1С;
	Запись.Система = Система;
	Запись.Организация = Организация;
	Запись.МеткаОбъектаЗагруженногоПоследним = МеткаОбъектаЗагруженногоПоследним;
	
	Запись.Записать(Истина);
	
КонецПроцедуры	

Процедура ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, Guid1C, Причина ,ОписаниеОшибки = "");
	Запись = РегистрыСведений.пик_ЖурналОшибокИнтеграций.СоздатьМенеджерЗаписи();
	
	Запись.ИмяТипа1С = ИмяТипа1С;
	Запись.Система = Система;
	Запись.Организация = Организация;
	Запись.GUID = Guid1C;
	Запись.ДатаПолучения = ТекущаяДатаСеанса();
	Запись.Причина = Причина;
	Запись.ОписаниеОшибки = ОписаниеОшибки;
	
	Запись.Записать(Истина);
КонецПроцедуры

Функция ПолучитьЗаписиСОшибками(ИмяТипа1С, Система, Организация, ОграничениеТрафика)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ "+ОграничениеТрафика+"
		|	пик_ЖурналОшибокИнтеграций.GUID КАК GUID
		|ИЗ
		|	РегистрСведений.пик_ЖурналОшибокИнтеграций КАК пик_ЖурналОшибокИнтеграций
		|ГДЕ
		|	пик_ЖурналОшибокИнтеграций.Система = &Система
		|	И пик_ЖурналОшибокИнтеграций.ИмяТипа1С = &ИмяТипа1С
		|	И пик_ЖурналОшибокИнтеграций.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ИмяТипа1С", ИмяТипа1С);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Система", Система);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("GUID");
	
	
КонецФункции

Процедура УдалитьЗаписьОшибки(ИмяТипа1С, Система, Организация, GuidОш);

	Записи = РегистрыСведений.пик_ЖурналОшибокИнтеграций.СоздатьНаборЗаписей();
	
	Записи.отбор.ИмяТипа1С.Установить(ИмяТипа1С);
	Записи.отбор.Система.Установить(Система);
	Записи.отбор.Организация.Установить(Организация);
	Записи.отбор.GUID.Установить(GuidОш);
	
	Записи.записать();
	
КонецПроцедуры	

#КонецОбласти

#Область ЗагрузкаПлатежекЕФС

Процедура ЗагрузитьПлатежкиЕФС(Ошибочные = Ложь)  Экспорт
	
	СтрПодключения = ПолучитьСтрокуПодключения();
	
	clnConn = Неопределено;
	ConnectionSQL = УстановитьСоединениеSQL(СтрПодключения, clnConn);
	
	ОграничениеТрафика = ПолучитьОграничениеТрафика();
	
	ОрганизацииДляЗагрузки = ПолучитьОрганизацииДляЗагрузки();
	
	Для Каждого СтрокаОрг Из ОрганизацииДляЗагрузки Цикл
				
		ЗагрузитьПлатежныеДокументы(СтрокаОрг, ConnectionSQL, ОграничениеТрафика,"Документ.СписаниеСРасчетногоСчета", 	"cdw.WriteOffFromAccount",  Ошибочные);
		ЗагрузитьПлатежныеДокументы(СтрокаОрг, ConnectionSQL, ОграничениеТрафика,"Документ.ПоступлениеНаРасчетныйСчет", "cdw.ReceiptOnAccount", 	Ошибочные);
		ЗагрузитьПлатежныеДокументы(СтрокаОрг, ConnectionSQL, ОграничениеТрафика,"Документ.ПриходныйКассовыйОрдер", 	"cdw.CashReceiptOrder",  	Ошибочные);
		ЗагрузитьПлатежныеДокументы(СтрокаОрг, ConnectionSQL, ОграничениеТрафика,"Документ.РасходныйКассовыйОрдер", 	"cdw.CashPaymentOrder",  	Ошибочные);
		
	КонецЦикла;
	
	ConnectionSQL.Close();
	
КонецПроцедуры

Процедура ЗагрузитьОшибочныеПлатежки() Экспорт
		
	ЗагрузитьПлатежкиЕФС(Истина);
	
КонецПроцедуры

Процедура ЗагрузитьПлатежныеДокументы(СтрокаОрг, ConnectionSQL, ОграничениеТрафика,ИмяТипа1С, ИмяТаблицыСКЛ, ЗагрузкаОшибочных = Ложь)

	Система = Перечисления.пик_СистемыХраненияДанных.CDW;
	
	ТекМаксВерсия = ПолучитьМаксимальнуюВерсию(ИмяТипа1С, Система, СтрокаОрг.Организация);
	
	СтруктураДанныхП = ПолучитьСтруктуруДанныхПлатежки(ИмяТипа1С);
	СтруктураДанныхП_ТЧ  = ПолучитьСтруктуруДанныхПлатежки_ТЧ(ИмяТипа1С);
	
	Если НЕ ЗагрузкаОшибочных Тогда 
		// отбор по организации и версии
		СтруктураОтбора = Новый Структура("some_text", "Version > "+ТекМаксВерсия+ " AND CompanyGuid1C = '" +СтрокаОрг.GUID+"'");
		СтруктураСортировки = Новый Структура("Version","") ;
		
		КолЗаписей = КолЗаписейСКЛ(ОграничениеТрафика);
		
		// получили нужные документы
		ЗаписиДок = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, СтруктураДанныхП, СтруктураОтбора, ConnectionSQL, КолЗаписей, СтруктураСортировки); 	
		
		Для Каждого СтрокаЗаписи Из ЗаписиДок Цикл
			СтруктураОтбора_ТЧ= Новый Структура("some_text", "Guid1C = '"+СтрокаЗаписи.Guid1C+"'");
			ЗаписиТЧ = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ+"_T", СтруктураДанныхП_ТЧ, СтруктураОтбора_ТЧ, ConnectionSQL, , ); 	
			
			ЗагрузитьПлатежку(СтрокаЗаписи, ЗаписиТЧ, ИмяТипа1С, СтрокаОрг.Организация, ConnectionSQL, Система);
			
		КонецЦикла;
		
		// раскомментировать после отладки
		Если ЗаписиДок.Количество() > 0 Тогда
			ЗаписатьНовуюМаксВерсию(ИмяТипа1С, Перечисления.пик_СистемыХраненияДанных.CDW, СтрокаОрг.Организация, СтрокаЗаписи.VersionString);
		КонецЕсли;
		
	Иначе 
		
		GuidыОшибочных = ПолучитьЗаписиСОшибками(ИмяТипа1С, Система, СтрокаОрг.Организация, ОграничениеТрафика);
		
		
		Для Каждого GuidОш Из GuidыОшибочных Цикл
			СтруктураОтбора= Новый Структура("some_text", "Guid1C = '"+GuidОш+"'");
			
			УдалитьЗаписьОшибки(ИмяТипа1С, Система, СтрокаОрг.Организация, GuidОш);
			
			ТЗЗаписи  = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, СтруктураДанныхП, СтруктураОтбора, ConnectionSQL, , ); 	
			
			Если ТЗЗаписи.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаписиТЧ = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ+"_T", СтруктураДанныхП_ТЧ, СтруктураОтбора, ConnectionSQL, , ); 	
			
			ЗагрузитьПлатежку(ТЗЗаписи[0], ЗаписиТЧ, ИмяТипа1С, СтрокаОрг.Организация, ConnectionSQL, Система);
			
		КонецЦикла;	
		
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗагрузитьПлатежку(СтрокаЗаписи, ЗаписиТЧ, ИмяТипа1С, Организация, ConnectionSQL, Система);

	НайтиДокумент = ПоискДокумента(ИмяТипа1С, СтрокаЗаписи.Guid1C);
	ВалРег = Константы.ВалютаРегламентированногоУчета.Получить();
	
	#Область СРС
	Если ИмяТипа1С = "Документ.СписаниеСРасчетногоСчета" Тогда
		
		Если НайтиДокумент.Количество() = 0 Тогда 
			
			Если СтрокаЗаписи.Marked Тогда 
				// не буду загружать помеченные
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
			//ДокументОбъектСсылка = Документы.СписаниеСРасчетногоСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.Guid1C)));
			//ДокументОбъект.УстановитьСсылкуНового(ДокументОбъектСсылка);		
			
		Иначе 	
			
			Если НайтиДокумент[0].Проведен Тогда 
				// не буду загружать проведенный документ
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = НайтиДокумент[0].Ссылка.ПолучитьОбъект();
			
		КонецЕсли;	
		
		ДокументОбъект.GUID = СтрокаЗаписи.Guid1C;
		ДокументОбъект.ПометкаУдаления  = СтрокаЗаписи.Marked;
		ДокументОбъект.Номер  = СтрокаЗаписи.Number;
		ДокументОбъект.Дата  = СтрокаЗаписи.Date;
		
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"пик_ОсновноеПодразделение");
		ДокументОбъект.НеПодтвержденоВыпискойБанка =  СтрокаЗаписи.NotConfirmBankStatement;
		ДокументОбъект.НомерВходящегоДокумента =  СтрокаЗаписи.NumInDocument;
		ДокументОбъект.СуммаДокумента = СтрокаЗаписи.SumDoc;
		ДокументОбъект.НазначениеПлатежа  = СтрокаЗаписи.PaymentPurpose;
		ДокументОбъект.Комментарий = "Загружено из CDW автоматически "+ Строка(ТекущаяДатаСеанса());
		
		//Если СтрокаЗаписи.DocumentCurrencyGuid1C <>"" тогда
		//	ДокументОбъект.ВалютаДокумента= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.DocumentCurrencyGuid1C)));
		//КонецЕсли;
		Если ДокументОбъект.ВалютаДокумента.пустая() Тогда  
			ТЗВалютаДокумента = ПоискСправочника("Справочник.Валюты",СтрокаЗаписи.DocumentCurrencyGuid1C);
			Если ТЗВалютаДокумента.Количество()<>0 Тогда
				
				ДокументОбъект.ВалютаДокумента = ТЗВалютаДокумента[0].Ссылка;
			Иначе	
				ДокументОбъект.ВалютаДокумента =  ВалРег;
			КонецЕсли;	
		КонецЕсли;
		
		если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
			ДокументОбъект.Счетбанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		иначе	
			ДокументОбъект.Счетбанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		КонецЕсли;	
		
		ДокументОбъект.ВидОперации = ПоискПеречисления("Перечисление.ВидыОперацийСписаниеДенежныхСредств", СтрокаЗаписи.OperationTypeWriteOffFromAccount, ConnectionSQL);
		
		ДокументОбъект.ДатаВходящегоДокумента =   СтрокаЗаписи.DateInDocument;
		
		
		// консолидированный контрагент
		Если СтрокаЗаписи.Contractor_IID <> "" Тогда
			
			ТЗКонтр = СформироватьиВыполнитьSELECTЗапросSQL("service.Instance", Новый Структура("ExternalID",""), Новый Структура("InstanceId",СтрокаЗаписи.Contractor_IID), ConnectionSQL ); 	
			
			Если ТЗКонтр.Количество() = 0 Тогда
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в Инстанс");
				//Возврат;
			КонецЕсли;
			ТЗКонтрагентКонсолидированный = ПоискСправочника("Справочник.пик_КонтрагентыКонсолидированные",ТЗКонтр[0].ExternalID);
			Если ТЗКонтрагентКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_КонтрагентКонсолидированный = ТЗКонтрагентКонсолидированный[0].Ссылка;
				
				ДокументОбъект.Контрагент =	НайтиКонтрагентаПоКонсолидированному(ДокументОбъект.пик_КонтрагентКонсолидированный);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в 1С");
				//Возврат;
			КонецЕсли;
			
			
		КонецЕсли;
		
		// консолидированный договор	
		Если СтрокаЗаписи.ContractGuid1C<>"" Тогда
			ТЗдоговорКонсолидированный = ПоискСправочника("Справочник.пик_ДоговорыКонтрагентовКонсолидированные",СтрокаЗаписи.ContractGuid1C);
			Если ТЗдоговорКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный = ТЗдоговорКонсолидированный[0].Ссылка;
				
				ДокументОбъект.ДоговорКонтрагента = НайтиЛокальныйДоговорКонтрагента(Организация,ДокументОбъект.пик_КонтрагентКонсолидированный, ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный, ДокументОбъект.Контрагент);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный договор в 1С");
				//Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		// бс контрагента
		Если СтрокаЗаписи.ContractorAccountGuid1C <> "" Тогда
			ТЗБСКонтрагентаКонс = ПоискСправочника("Справочник.пик_БанковскиеСчетаКонсолидированные",СтрокаЗаписи.ContractorAccountGuid1C);
			Если ТЗБСКонтрагентаКонс.Количество()<>0 Тогда
				БСКонтрагентаКонс = ТЗБСКонтрагентаКонс[0].Ссылка;
				ДокументОбъект.СчетКонтрагента = ПолучитьЛокальныйБС(БСКонтрагентаКонс, ДокументОбъект.Контрагент);
				Если ДокументОбъект.СчетКонтрагента.Пустая() Тогда
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден банковский счет по консолидированному");
				КонецЕсли;	
			Иначе
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный банковский счет в 1С");
				//Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		// бс организации
		Если СтрокаЗаписи.CompanyAccountGuid1C <> "" Тогда
			ТЗБСОргКонс = ПоискСправочника("Справочник.пик_БанковскиеСчетаКонсолидированные",СтрокаЗаписи.CompanyAccountGuid1C);
			Если ТЗБСОргКонс.Количество()<>0 Тогда
				БСОргКонс = ТЗБСОргКонс[0].Ссылка;
				ДокументОбъект.СчетОрганизации = ПолучитьЛокальныйБС(БСОргКонс, Организация);
				Если ДокументОбъект.СчетОрганизации.Пустая() Тогда
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден банковский счет организации по консолидированному");
				КонецЕсли;	
			Иначе
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный банковский счет организации в 1С");
				//Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		//если ДокументОбъект.ВидОперации =  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
		
		Счета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		СчетВзаиморасчетов = Счета.СчетРасчетов;
		СчетАвансов = Счета.СчетАвансов;
		
		Если ЗаписиТЧ.Количество() = 0 Тогда 
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.добавить(); 	
			НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			НоваяСтрока.СуммаПлатежа  = СтрокаЗаписи.SumDoc;
			Если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			Иначе	
				НоваяСтрока.КурсВзаиморасчетов = ?(СтрокаЗаписи.SumSettlement<>0,СтрокаЗаписи.SumDoc/СтрокаЗаписи.SumSettlement,1);
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли;	
			НоваяСтрока.СуммаВзаиморасчетов  = ?(СтрокаЗаписи.SumSettlement<>0,СтрокаЗаписи.SumSettlement, НоваяСтрока.СуммаПлатежа);
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетВзаиморасчетов; 
			НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетАвансов; 
						
			// заполнение НДС
			//Если Ложь Тогда
			СтавкаНДС = ПоискПеречисления("Перечисление.СтавкиНДС", СтрокаЗаписи.VATRateEnum, ConnectionSQL);
			
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			НоваяСтрока.СуммаПлатежа,
			Истина,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС)) ;
			
			//КонецЕсли; 	
			

		КонецЕсли;	
		
		Для Каждого СтрокаТЧ Из ЗаписиТЧ Цикл
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.добавить(); 	
			НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			НоваяСтрока.СуммаПлатежа  = СтрокаТЧ.Sum;
			НоваяСтрока.СуммаВзаиморасчетов  = СтрокаТЧ.SumSettlement;
			Если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			Иначе	
				НоваяСтрока.КурсВзаиморасчетов = ?(СтрокаТЧ.SumSettlement<>0,СтрокаТЧ.SumDoc/СтрокаТЧ.SumSettlement,1);
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли;	
			НоваяСтрока.СуммаВзаиморасчетов  = ?(СтрокаТЧ.SumSettlement<>0,СтрокаТЧ.SumSettlement, НоваяСтрока.СуммаПлатежа);
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетВзаиморасчетов; 
			НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетАвансов; 
			
			Если СтрокаТЧ.ObjectInvestmentGuid1C <> "" Тогда 
				
				ТЗОбъектыИДП = ПоискСправочника("Справочник.пик_ОбъектыИДП", СтрокаТЧ.ObjectInvestmentGuid1C);
				Если ТЗОбъектыИДП.Количество()<>0 Тогда
					НоваяСтрока.пик_Подразделение = пик_ОбъектыУчета.ПолучитьОбъектУчета(Организация,,ТЗОбъектыИДП[0].Ссылка,Истина);
				Иначе	
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден объект ИДП в 1С");
					//Возврат;
				КонецЕсли; 
				
				
			КонецЕсли; 
			
			// заполнение НДС
			//Если Ложь Тогда
			СтавкаНДС = ПоискПеречисления("Перечисление.СтавкиНДС", СтрокаЗаписи.VATRateEnum, ConnectionSQL);
			
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			НоваяСтрока.СуммаПлатежа,
			Истина,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			
			//КонецЕсли; 	
			
			ТЗДДС = ПоискСправочника("Справочник.СтатьиДвиженияДенежныхСредств",СтрокаТЧ.ArticleCashFlowGuid1C);
			Если ТЗДДС.Количество()<>0 Тогда
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = ТЗДДС[0].Ссылка;
			КонецЕсли;	
		КонецЦикла; 	
		
		ДокументОбъект.обменданными.загрузка = истина;
		ДокументОбъект.записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПРС
	Если ИмяТипа1С = "Документ.ПоступлениеНаРасчетныйСчет" Тогда
		
		Если НайтиДокумент.Количество() = 0 Тогда 
			
			Если СтрокаЗаписи.Marked Тогда 
				// не буду загружать помеченные
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
			//ДокументОбъектСсылка = Документы.ПоступлениеНаРасчетныйСчет.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.Guid1C)));
			//ДокументОбъект.УстановитьСсылкуНового(ДокументОбъектСсылка);		
			
		Иначе 	
			
			Если НайтиДокумент[0].Проведен Тогда 
				// не буду загружать проведенный документ
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = НайтиДокумент[0].Ссылка.ПолучитьОбъект();
			
		КонецЕсли;	
		
		ДокументОбъект.GUID = СтрокаЗаписи.Guid1C;
		ДокументОбъект.ПометкаУдаления  = СтрокаЗаписи.Marked;
		ДокументОбъект.Номер  = СтрокаЗаписи.Number;
		ДокументОбъект.Дата  = СтрокаЗаписи.Date;
		ДокументОбъект.пик_ПлатежОтТретьегоЛица  = СтрокаЗаписи.AccountsThirdParties;
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"пик_ОсновноеПодразделение");
		ДокументОбъект.НомерВходящегоДокумента =  СтрокаЗаписи.NumInDocument;
		ДокументОбъект.СуммаДокумента = СтрокаЗаписи.SumDoc;
		ДокументОбъект.НазначениеПлатежа  = СтрокаЗаписи.PaymentPurpose;
		ДокументОбъект.Комментарий = "Загружено из CDW автоматически "+ Строка(ТекущаяДатаСеанса());
		
		//Если СтрокаЗаписи.DocumentCurrencyGuid1C <>"" тогда
		//	ДокументОбъект.ВалютаДокумента= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.DocumentCurrencyGuid1C)));
		//КонецЕсли;
		Если ДокументОбъект.ВалютаДокумента.пустая() Тогда  
			ТЗВалютаДокумента = ПоискСправочника("Справочник.Валюты",СтрокаЗаписи.DocumentCurrencyGuid1C);
			Если ТЗВалютаДокумента.Количество()<>0 Тогда
				
				ДокументОбъект.ВалютаДокумента = ТЗВалютаДокумента[0].Ссылка;
			Иначе	
				ДокументОбъект.ВалютаДокумента =  ВалРег;
			КонецЕсли;	
		КонецЕсли;
		
		если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
			ДокументОбъект.Счетбанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		иначе	
			ДокументОбъект.Счетбанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		КонецЕсли;	
		
		ДокументОбъект.ВидОперации = ПоискПеречисления("Перечисление.ВидыОперацийПоступлениеДенежныхСредств", СтрокаЗаписи.OperationTypeRecieptOnAccount, ConnectionSQL);
		
		ДокументОбъект.ДатаВходящегоДокумента =   СтрокаЗаписи.DateInDocument;
		
		
		// консолидированный контрагент
		Если СтрокаЗаписи.Contractor_IID <> "" Тогда
			
			ТЗКонтр = СформироватьиВыполнитьSELECTЗапросSQL("service.Instance", Новый Структура("ExternalID",""), Новый Структура("InstanceId",СтрокаЗаписи.Contractor_IID), ConnectionSQL ); 	
			
			Если ТЗКонтр.Количество() = 0 Тогда
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в Инстанс");
				//Возврат;
			КонецЕсли;
			ТЗКонтрагентКонсолидированный = ПоискСправочника("Справочник.пик_КонтрагентыКонсолидированные",ТЗКонтр[0].ExternalID);
			Если ТЗКонтрагентКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_КонтрагентКонсолидированный = ТЗКонтрагентКонсолидированный[0].Ссылка;
				
				ДокументОбъект.Контрагент =	НайтиКонтрагентаПоКонсолидированному(ДокументОбъект.пик_КонтрагентКонсолидированный);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в 1С");
				//Возврат;
			КонецЕсли;
			
			
		КонецЕсли;
		
		// консолидированный договор	
		Если СтрокаЗаписи.ContractGuid1C<>"" Тогда
			ТЗдоговорКонсолидированный = ПоискСправочника("Справочник.пик_ДоговорыКонтрагентовКонсолидированные",СтрокаЗаписи.ContractGuid1C);
			Если ТЗдоговорКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный = ТЗдоговорКонсолидированный[0].Ссылка;
				
				ДокументОбъект.ДоговорКонтрагента = НайтиЛокальныйДоговорКонтрагента(Организация,ДокументОбъект.пик_КонтрагентКонсолидированный, ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный, ДокументОбъект.Контрагент);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный договор в 1С");
				//Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		// бс контрагента
		Если СтрокаЗаписи.ContractorAccountGuid1C <> "" Тогда
			ТЗБСКонтрагентаКонс = ПоискСправочника("Справочник.пик_БанковскиеСчетаКонсолидированные",СтрокаЗаписи.ContractorAccountGuid1C);
			Если ТЗБСКонтрагентаКонс.Количество()<>0 Тогда
				БСКонтрагентаКонс = ТЗБСКонтрагентаКонс[0].Ссылка;
				ДокументОбъект.СчетКонтрагента = ПолучитьЛокальныйБС(БСКонтрагентаКонс, ДокументОбъект.Контрагент);
				Если ДокументОбъект.СчетКонтрагента.Пустая() Тогда
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден банковский счет по консолидированному");
				КонецЕсли;	
			Иначе
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный банковский счет в 1С");
				//Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		// бс организации
		Если СтрокаЗаписи.CompanyAccountGuid1C <> "" Тогда
			ТЗБСОргКонс = ПоискСправочника("Справочник.пик_БанковскиеСчетаКонсолидированные",СтрокаЗаписи.CompanyAccountGuid1C);
			Если ТЗБСОргКонс.Количество()<>0 Тогда
				БСОргКонс = ТЗБСОргКонс[0].Ссылка;
				ДокументОбъект.СчетОрганизации = ПолучитьЛокальныйБС(БСОргКонс, Организация);
				Если ДокументОбъект.СчетОрганизации.Пустая() Тогда
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден банковский счет организации по консолидированному");
				КонецЕсли;	
			Иначе
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный банковский счет организации в 1С");
				//Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		//если ДокументОбъект.ВидОперации =  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
		
		Счета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		СчетВзаиморасчетов = Счета.СчетРасчетовПокупателя;
		СчетАвансов = Счета.СчетАвансовПокупателя;
		
		Если ЗаписиТЧ.Количество() = 0 Тогда 
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.добавить(); 	
			НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			НоваяСтрока.СуммаПлатежа  = СтрокаЗаписи.SumDoc;
			Если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			Иначе	
				НоваяСтрока.КурсВзаиморасчетов = ?(СтрокаЗаписи.SumSettlemen<>0,СтрокаЗаписи.SumDoc/СтрокаЗаписи.SumSettlemen,0);
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли;	
			НоваяСтрока.СуммаВзаиморасчетов  = ?(СтрокаЗаписи.SumSettlement<>0,СтрокаЗаписи.SumSettlement, НоваяСтрока.СуммаПлатежа);
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетВзаиморасчетов; 
			НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетАвансов; 
			
			
			// заполнение НДС
			СтавкаНДС = ПоискПеречисления("Перечисление.СтавкиНДС", СтрокаЗаписи.VATRateEnum, ConnectionSQL);
			
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				НоваяСтрока.СуммаПлатежа,
				Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
					
			
		КонецЕсли;	
		
		Для Каждого СтрокаТЧ Из ЗаписиТЧ Цикл
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.добавить(); 	
			НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			НоваяСтрока.СуммаПлатежа  = СтрокаТЧ.Sum;
			НоваяСтрока.СуммаВзаиморасчетов  = СтрокаТЧ.SumSettlement;
			Если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			Иначе	
				НоваяСтрока.КурсВзаиморасчетов = ?(СтрокаТЧ.SumSettlemen<>0,СтрокаТЧ.SumDoc/СтрокаТЧ.SumSettlemen,0);
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли;	
			НоваяСтрока.СуммаВзаиморасчетов  = ?(СтрокаТЧ.SumSettlement<>0,СтрокаТЧ.SumSettlement, НоваяСтрока.СуммаПлатежа);
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетВзаиморасчетов; 
			НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетАвансов; 
			
			Если СтрокаТЧ.ObjectInvestmentGuid1C <> "" Тогда 
				
				ТЗОбъектыИДП = ПоискСправочника("Справочник.пик_ОбъектыИДП", СтрокаТЧ.ObjectInvestmentGuid1C);
				Если ТЗОбъектыИДП.Количество()<>0 Тогда
					НоваяСтрока.пик_Подразделение = пик_ОбъектыУчета.ПолучитьОбъектУчета(Организация,,ТЗОбъектыИДП[0].Ссылка,Истина);
				Иначе	
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден объект ИДП в 1С");
					//Возврат;
				КонецЕсли; 
				
				
			КонецЕсли; 
			
			// заполнение НДС
			СтавкаНДС = ПоискПеречисления("Перечисление.СтавкиНДС", СтрокаЗаписи.VATRateEnum, ConnectionSQL);
			
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				НоваяСтрока.СуммаПлатежа,
				Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
					
			ТЗДДС = ПоискСправочника("Справочник.СтатьиДвиженияДенежныхСредств",СтрокаТЧ.ArticleCashFlowGuid1C);
			Если ТЗДДС.Количество()<>0 Тогда
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = ТЗДДС[0].Ссылка;
			КонецЕсли;	
			
		КонецЦикла; 	
		
		ДокументОбъект.обменданными.загрузка = истина;
		ДокументОбъект.записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	#КонецОбласти

	#Область ПКО
	Если ИмяТипа1С = "Документ.ПриходныйКассовыйОрдер" Тогда
		
		Если НайтиДокумент.Количество() = 0 Тогда 
			
			Если СтрокаЗаписи.Marked Тогда 
				// не буду загружать помеченные
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			//ДокументОбъектСсылка = Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.Guid1C)));
			//ДокументОбъект.УстановитьСсылкуНового(ДокументОбъектСсылка);		
			
		Иначе 	
			
			Если НайтиДокумент[0].Проведен Тогда 
				// не буду загружать проведенный документ
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = НайтиДокумент[0].Ссылка.ПолучитьОбъект();
			
		КонецЕсли;	
		
		ДокументОбъект.GUID = СтрокаЗаписи.Guid1C;
		ДокументОбъект.ПометкаУдаления  = СтрокаЗаписи.Marked;
		ДокументОбъект.Номер  = СтрокаЗаписи.Number;
		ДокументОбъект.Дата  = СтрокаЗаписи.Date;
		//ДокументОбъект.пик_ПлатежОтТретьегоЛица  = СтрокаЗаписи.AccountsThirdParties;
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"пик_ОсновноеПодразделение");
		//ДокументОбъект.НомерВходящегоДокумента =  СтрокаЗаписи.NumInDocument;
		ДокументОбъект.СуммаДокумента = СтрокаЗаписи.SumDoc;
		//ДокументОбъект.НазначениеПлатежа  = СтрокаЗаписи.PaymentPurpose;
		ДокументОбъект.Комментарий = "Загружено из CDW автоматически "+ Строка(ТекущаяДатаСеанса());
		
		//Если СтрокаЗаписи.DocumentCurrencyGuid1C <>"" тогда
		//	ДокументОбъект.ВалютаДокумента= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.DocumentCurrencyGuid1C)));
		//КонецЕсли;
		Если ДокументОбъект.ВалютаДокумента.пустая() Тогда  
			ТЗВалютаДокумента = ПоискСправочника("Справочник.Валюты",СтрокаЗаписи.DocumentCurrencyGuid1C);
			Если ТЗВалютаДокумента.Количество()<>0 Тогда
				
				ДокументОбъект.ВалютаДокумента = ТЗВалютаДокумента[0].Ссылка;
			Иначе	
				ДокументОбъект.ВалютаДокумента =  ВалРег;
			КонецЕсли;	
		КонецЕсли;
		
		если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
			ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		иначе	
			ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
		КонецЕсли;	
		
		ДокументОбъект.ВидОперации = ПоискПеречисления("Перечисление.ВидыОперацийПКО", СтрокаЗаписи.OperationTypeCashReceiptOrder, ConnectionSQL);
		
		//ДокументОбъект.ДатаВходящегоДокумента =   СтрокаЗаписи.DateInDocument;
		
		
		// консолидированный контрагент
		Если СтрокаЗаписи.Contractor_IID <> "" Тогда
			
			ТЗКонтр = СформироватьиВыполнитьSELECTЗапросSQL("service.Instance", Новый Структура("ExternalID",""), Новый Структура("InstanceId",СтрокаЗаписи.Contractor_IID), ConnectionSQL ); 	
			
			Если ТЗКонтр.Количество() = 0 Тогда
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в Инстанс");
				//Возврат;
			КонецЕсли;
			ТЗКонтрагентКонсолидированный = ПоискСправочника("Справочник.пик_КонтрагентыКонсолидированные",ТЗКонтр[0].ExternalID);
			Если ТЗКонтрагентКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_КонтрагентКонсолидированный = ТЗКонтрагентКонсолидированный[0].Ссылка;
				
				ДокументОбъект.Контрагент =	НайтиКонтрагентаПоКонсолидированному(ДокументОбъект.пик_КонтрагентКонсолидированный);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в 1С");
				//Возврат;
			КонецЕсли;
			
			
		КонецЕсли;
		
		// консолидированный договор	
		Если СтрокаЗаписи.ContractGuid1C<>"" Тогда
			ТЗдоговорКонсолидированный = ПоискСправочника("Справочник.пик_ДоговорыКонтрагентовКонсолидированные",СтрокаЗаписи.ContractGuid1C);
			Если ТЗдоговорКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный = ТЗдоговорКонсолидированный[0].Ссылка;
				
				ДокументОбъект.ДоговорКонтрагента = НайтиЛокальныйДоговорКонтрагента(Организация,ДокументОбъект.пик_КонтрагентКонсолидированный, ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный, ДокументОбъект.Контрагент);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный договор в 1С");
				//Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		//если ДокументОбъект.ВидОперации =  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
		
		Счета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		СчетВзаиморасчетов = Счета.СчетРасчетовПокупателя;
		СчетАвансов = Счета.СчетАвансовПокупателя;
		Для Каждого СтрокаТЧ Из ЗаписиТЧ Цикл
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.добавить(); 	
			НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			НоваяСтрока.СуммаПлатежа  = СтрокаТЧ.Sum;
			НоваяСтрока.СуммаВзаиморасчетов  = СтрокаТЧ.SumSettlement;
			Если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли;	
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетВзаиморасчетов; 
			НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетАвансов; 
			
			//Если СтрокаТЧ.ObjectInvestmentGuid1C <> "" Тогда 
			//	
			//	ТЗОбъектыИДП = ПоискСправочника("Справочник.пик_ОбъектыИДП", СтрокаТЧ.ObjectInvestmentGuid1C);
			//	Если ТЗОбъектыИДП<>0 Тогда
			//		НоваяСтрока.пик_Подразделение = пик_ОбъектыУчета.ПолучитьОбъектУчета(Организация,,ТЗОбъектыИДП[0].Ссылка,Истина);
			//	Иначе	
			//		ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден объект ИДП в 1С");
			//		//Возврат;
			//	КонецЕсли; 
			//	
			//	
			//КонецЕсли; 
			
			// заполнение НДС
			СтавкаНДС = ПоискПеречисления("Перечисление.СтавкиНДС", СтрокаЗаписи.VATRateEnum, ConnectionSQL);
			
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				НоваяСтрока.СуммаПлатежа,
				Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
				
			ТЗДДС = ПоискСправочника("Справочник.СтатьиДвиженияДенежныхСредств",СтрокаТЧ.ArticleCashFlowGuid1C);
			Если ТЗДДС.Количество()<>0 Тогда
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = ТЗДДС[0].Ссылка;
			КонецЕсли;	
				
			
		КонецЦикла; 	
		
		ДокументОбъект.обменданными.загрузка = истина;
		ДокументОбъект.записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	#КонецОбласти

	#Область РКО
	Если ИмяТипа1С = "Документ.РасходныйКассовыйОрдер" Тогда
		
		Если НайтиДокумент.Количество() = 0 Тогда 
			
			Если СтрокаЗаписи.Marked Тогда 
				// не буду загружать помеченные
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			//ДокументОбъектСсылка = Документы.РасходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.Guid1C)));
			//ДокументОбъект.УстановитьСсылкуНового(ДокументОбъектСсылка);		
			
		Иначе 	
			
			Если НайтиДокумент[0].Проведен Тогда 
				// не буду загружать проведенный документ
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = НайтиДокумент[0].Ссылка.ПолучитьОбъект();
			
		КонецЕсли;	
		
		ДокументОбъект.GUID = СтрокаЗаписи.Guid1C;
		ДокументОбъект.ПометкаУдаления  = СтрокаЗаписи.Marked;
		ДокументОбъект.Номер  = СтрокаЗаписи.Number;
		ДокументОбъект.Дата  = СтрокаЗаписи.Date;
		//ДокументОбъект.пик_ПлатежОтТретьегоЛица  = СтрокаЗаписи.AccountsThirdParties;
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"пик_ОсновноеПодразделение");
		ДокументОбъект.НомерВходящегоДокумента =  СтрокаЗаписи.NumInDocument;
		ДокументОбъект.СуммаДокумента = СтрокаЗаписи.SumDoc;
		//ДокументОбъект.НазначениеПлатежа  = СтрокаЗаписи.PaymentPurpose;
		ДокументОбъект.Комментарий = "Загружено из CDW автоматически "+ Строка(ТекущаяДатаСеанса());
		
		//Если СтрокаЗаписи.DocumentCurrencyGuid1C <>"" тогда
		//	ДокументОбъект.ВалютаДокумента= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.DocumentCurrencyGuid1C)));
		//КонецЕсли;
		Если ДокументОбъект.ВалютаДокумента.пустая() Тогда  
			ТЗВалютаДокумента = ПоискСправочника("Справочник.Валюты",СтрокаЗаписи.DocumentCurrencyGuid1C);
			Если ТЗВалютаДокумента.Количество()<>0 Тогда
				
				ДокументОбъект.ВалютаДокумента = ТЗВалютаДокумента[0].Ссылка;
			Иначе	
				ДокументОбъект.ВалютаДокумента =  ВалРег;
			КонецЕсли;	
		КонецЕсли;
		
		если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
			ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		иначе	
			ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
		КонецЕсли;	
		
		ДокументОбъект.ВидОперации = ПоискПеречисления("Перечисление.ВидыОперацийРКО", СтрокаЗаписи.OperationTypeCashPaymentOrder, ConnectionSQL);
		
		//ДокументОбъект.ДатаВходящегоДокумента =   СтрокаЗаписи.DateInDocument;
		ДокументОбъект.Выдать = СтрокаЗаписи.Give;
		
		// консолидированный контрагент
		Если СтрокаЗаписи.Contractor_IID <> "" Тогда
			
			ТЗКонтр = СформироватьиВыполнитьSELECTЗапросSQL("service.Instance", Новый Структура("ExternalID",""), Новый Структура("InstanceId",СтрокаЗаписи.Contractor_IID), ConnectionSQL ); 	
			
			Если ТЗКонтр.Количество() = 0 Тогда
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в Инстанс");
				//Возврат;
			КонецЕсли;
			ТЗКонтрагентКонсолидированный = ПоискСправочника("Справочник.пик_КонтрагентыКонсолидированные",ТЗКонтр[0].ExternalID);
			Если ТЗКонтрагентКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_КонтрагентКонсолидированный = ТЗКонтрагентКонсолидированный[0].Ссылка;
				
				ДокументОбъект.Контрагент =	НайтиКонтрагентаПоКонсолидированному(ДокументОбъект.пик_КонтрагентКонсолидированный);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в 1С");
				//Возврат;
			КонецЕсли;
			
			
		КонецЕсли;
		
		// консолидированный договор	
		Если СтрокаЗаписи.ContractGuid1C<>"" Тогда
			ТЗдоговорКонсолидированный = ПоискСправочника("Справочник.пик_ДоговорыКонтрагентовКонсолидированные",СтрокаЗаписи.ContractGuid1C);
			Если ТЗдоговорКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный = ТЗдоговорКонсолидированный[0].Ссылка;
				
				ДокументОбъект.ДоговорКонтрагента = НайтиЛокальныйДоговорКонтрагента(Организация,ДокументОбъект.пик_КонтрагентКонсолидированный, ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный, ДокументОбъект.Контрагент);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный договор в 1С");
				//Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		//если ДокументОбъект.ВидОперации =  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
		
		Счета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		СчетВзаиморасчетов = Счета.СчетРасчетов;
		СчетАвансов = Счета.СчетАвансов;
		Для Каждого СтрокаТЧ Из ЗаписиТЧ Цикл
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.добавить(); 	
			НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			НоваяСтрока.СуммаПлатежа  = СтрокаТЧ.Sum;
			НоваяСтрока.СуммаВзаиморасчетов  = СтрокаТЧ.SumSettlement;
			Если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли;	
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетВзаиморасчетов; 
			НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетАвансов; 
			
			//Если СтрокаТЧ.ObjectInvestmentGuid1C <> "" Тогда 
			//	
			//	ТЗОбъектыИДП = ПоискСправочника("Справочник.пик_ОбъектыИДП", СтрокаТЧ.ObjectInvestmentGuid1C);
			//	Если ТЗОбъектыИДП<>0 Тогда
			//		НоваяСтрока.пик_Подразделение = пик_ОбъектыУчета.ПолучитьОбъектУчета(Организация,,ТЗОбъектыИДП[0].Ссылка,Истина);
			//	Иначе	
			//		ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден объект ИДП в 1С");
			//		//Возврат;
			//	КонецЕсли; 
			//	
			//	
			//КонецЕсли; 
			
			// заполнение НДС
			СтавкаНДС = ПоискПеречисления("Перечисление.СтавкиНДС", СтрокаЗаписи.VATRateEnum, ConnectionSQL);
			
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				НоваяСтрока.СуммаПлатежа,
				Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
				
			ТЗДДС = ПоискСправочника("Справочник.СтатьиДвиженияДенежныхСредств",СтрокаТЧ.ArticleCashFlowGuid1C);
			Если ТЗДДС.Количество()<>0 Тогда
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = ТЗДДС[0].Ссылка;
			КонецЕсли;	
				
			
		КонецЦикла; 	
		
		ДокументОбъект.обменданными.загрузка = истина;
		ДокументОбъект.записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры	

Функция ПолучитьСтруктуруДанныхПлатежки(ИмяТипа1С)
	СтруктураДанных = Новый Структура() ;
	
	Если ИмяТипа1С = "Документ.СписаниеСРасчетногоСчета" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("Posted",0);
		СтруктураДанных.Вставить("Marked",0);
		СтруктураДанных.Вставить("Date",'00010101');
		СтруктураДанных.Вставить("Number",0);
		СтруктураДанных.Вставить("CompanyGuid1C","");
		СтруктураДанных.Вставить("CurrencyGuid1C","");
		СтруктураДанных.Вставить("DocumentCurrencyGuid1C","");
		СтруктураДанных.Вставить("OperationTypeWriteOffFromAccount",0);
		СтруктураДанных.Вставить("OperationTypeBudgetGuid1C","");
		СтруктураДанных.Вставить("DateInDocument",'00010101');
		
		СтруктураДанных.Вставить("DateUpload",'00010101');
		СтруктураДанных.Вставить("DateMakeBank",'00010101');
		СтруктураДанных.Вставить("ContractGuid1C","");
		СтруктураДанных.Вставить("MainContractGuid1C","");
		СтруктураДанных.Вставить("PaymentId","");
		//СтруктураДанных.Вставить("ContractorName","");
		СтруктураДанных.Вставить("Comment","");
		СтруктураДанных.Вставить("Contractor_IID","");
		СтруктураДанных.Вставить("PaymentPurpose","");
		СтруктураДанных.Вставить("NotConfirmBankStatement",0);
		СтруктураДанных.Вставить("NumInDocument","");
		СтруктураДанных.Вставить("ContractorCompanyGuid1C","");
		СтруктураДанных.Вставить("MainContractorGuid1C","");
		СтруктураДанных.Вставить("ResponsibleGuid1C","");
		СтруктураДанных.Вставить("MakeBank",0);
		СтруктураДанных.Вставить("AccountsThirdParties",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("SumDoc",0);
		СтруктураДанных.Вставить("ContractorAccountGuid1C","");
		СтруктураДанных.Вставить("CompanyAccountGuid1C","");
		СтруктураДанных.Вставить("TypeOperBudgetEnum",0);
		СтруктураДанных.Вставить("TypePaymentDocumentEnum",0);
		СтруктураДанных.Вставить("Version","");
		СтруктураДанных.Вставить("VersionString","");
		СтруктураДанных.Вставить("VATRateEnum",0);
		
		СтруктураДанных.Вставить("Version1C","");
	КонецЕсли;
	
	Если ИмяТипа1С = "Документ.ПоступлениеНаРасчетныйСчет" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("Posted",0);
		СтруктураДанных.Вставить("Marked",0);
		СтруктураДанных.Вставить("Date",'00010101');
		СтруктураДанных.Вставить("Number",0);
		СтруктураДанных.Вставить("CompanyGuid1C","");
		СтруктураДанных.Вставить("CurrencyGuid1C","");
		СтруктураДанных.Вставить("DocumentCurrencyGuid1C","");
		СтруктураДанных.Вставить("OperationTypeRecieptOnAccount",0);
		СтруктураДанных.Вставить("OperationTypeBudgetGuid1C","");
		СтруктураДанных.Вставить("DateInDocument",'00010101');
		
		СтруктураДанных.Вставить("DateUpload",'00010101');
		СтруктураДанных.Вставить("DateMakeBank",'00010101');
		СтруктураДанных.Вставить("ContractGuid1C","");
		СтруктураДанных.Вставить("MainContractGuid1C","");
		СтруктураДанных.Вставить("PaymentId","");
		//СтруктураДанных.Вставить("ContractorName","");
		СтруктураДанных.Вставить("Comment","");
		СтруктураДанных.Вставить("Contractor_IID","");
		СтруктураДанных.Вставить("PaymentPurpose","");
		СтруктураДанных.Вставить("NumInDocument","");
		СтруктураДанных.Вставить("ContractorCompanyGuid1C","");
		СтруктураДанных.Вставить("MainContractorGuid1C","");
		СтруктураДанных.Вставить("ResponsibleGuid1C","");
		СтруктураДанных.Вставить("MakeBank",0);
		СтруктураДанных.Вставить("AccountsThirdParties",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("SumDoc",0);
		СтруктураДанных.Вставить("ContractorAccountGuid1C","");
		СтруктураДанных.Вставить("CompanyAccountGuid1C","");
		СтруктураДанных.Вставить("TypeOperBudgetEnum",0);
		СтруктураДанных.Вставить("TypePaymentDocumentEnum",0);
		СтруктураДанных.Вставить("Version","");
		СтруктураДанных.Вставить("VersionString","");
		
		
		СтруктураДанных.Вставить("Version1C","");
		СтруктураДанных.Вставить("SumVAT","");
		СтруктураДанных.Вставить("VATRateEnum",0);
	КонецЕсли;
	
	Если ИмяТипа1С = "Документ.ПриходныйКассовыйОрдер" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("Posted",0);
		СтруктураДанных.Вставить("Marked",0);
		СтруктураДанных.Вставить("Date",'00010101');
		СтруктураДанных.Вставить("Number",0);
		СтруктураДанных.Вставить("CompanyGuid1C","");
		СтруктураДанных.Вставить("CurrencyGuid1C","");
		СтруктураДанных.Вставить("DocumentCurrencyGuid1C","");
		СтруктураДанных.Вставить("OperationTypeCashReceiptOrder",0);
		СтруктураДанных.Вставить("OperationTypeBudgetGuid1C","");
		
		СтруктураДанных.Вставить("ContractGuid1C","");
		//СтруктураДанных.Вставить("ContractorName","");
		СтруктураДанных.Вставить("Comment","");
		СтруктураДанных.Вставить("Contractor_IID","");
		//СтруктураДанных.Вставить("PaymentPurpose","");
		//СтруктураДанных.Вставить("NumInDocument","");
		//СтруктураДанных.Вставить("ContractorCompanyGuid1C","");
		//СтруктураДанных.Вставить("ResponsibleGuid1C","");
		//СтруктураДанных.Вставить("MakeBank",0);
		//СтруктураДанных.Вставить("AccountsThirdParties",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("SumDoc",0);
		//СтруктураДанных.Вставить("ContractorAccountGuid1C","");
		//СтруктураДанных.Вставить("CompanyAccountGuid1C","");
		СтруктураДанных.Вставить("TypeOperBudgetEnum",0);
		//СтруктураДанных.Вставить("TypePaymentDocumentEnum",0);
		СтруктураДанных.Вставить("Version","");
		СтруктураДанных.Вставить("VersionString","");
		
		СтруктураДанных.Вставить("Accept","");
		СтруктураДанных.Вставить("Version1C","");
		СтруктураДанных.Вставить("SumVAT","");
		СтруктураДанных.Вставить("VATRateEnum",0);
	КонецЕсли;
	
	Если ИмяТипа1С = "Документ.РасходныйКассовыйОрдер" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("Posted",0);
		СтруктураДанных.Вставить("Marked",0);
		СтруктураДанных.Вставить("Date",'00010101');
		СтруктураДанных.Вставить("Number",0);
		СтруктураДанных.Вставить("CompanyGuid1C","");
		СтруктураДанных.Вставить("CurrencyGuid1C","");
		СтруктураДанных.Вставить("DocumentCurrencyGuid1C","");
		СтруктураДанных.Вставить("OperationTypeCashPaymentOrder",0);
		СтруктураДанных.Вставить("Give",0);
		
		СтруктураДанных.Вставить("OperationTypeBudgetGuid1C","");
		
		СтруктураДанных.Вставить("ContractGuid1C","");
		//СтруктураДанных.Вставить("ContractorName","");
		СтруктураДанных.Вставить("Comment","");
		СтруктураДанных.Вставить("Contractor_IID","");
		//СтруктураДанных.Вставить("PaymentPurpose","");
		СтруктураДанных.Вставить("NumInDocument","");
		СтруктураДанных.Вставить("CheckNumKKM","");
		//СтруктураДанных.Вставить("ContractorCompanyGuid1C","");
		//СтруктураДанных.Вставить("ResponsibleGuid1C","");
		//СтруктураДанных.Вставить("MakeBank",0);
		//СтруктураДанных.Вставить("AccountsThirdParties",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("SumDoc",0);
		//СтруктураДанных.Вставить("ContractorAccountGuid1C","");
		//СтруктураДанных.Вставить("CompanyAccountGuid1C","");
		СтруктураДанных.Вставить("TypeOperBudgetEnum",0);
		//СтруктураДанных.Вставить("TypePaymentDocumentEnum",0);
		СтруктураДанных.Вставить("Version","");
		СтруктураДанных.Вставить("VersionString","");
		
		
		СтруктураДанных.Вставить("Version1C","");
		СтруктураДанных.Вставить("SumVAT","");
		СтруктураДанных.Вставить("VATRateEnum",0);
	КонецЕсли;

	Возврат  СтруктураДанных;
КонецФункции

Функция ПолучитьСтруктуруДанныхПлатежки_ТЧ(ИмяТипа1С)
	
	СтруктураДанных = Новый Структура() ;
	
	Если ИмяТипа1С = "Документ.СписаниеСРасчетногоСчета" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("ActivityTypeGuid1C","");
		СтруктураДанных.Вставить("IdPositionBudget","");
		СтруктураДанных.Вставить("ObjectInvestmentGuid1C","");
		СтруктураДанных.Вставить("ArticleCashFlowGuid1C","");
		СтруктураДанных.Вставить("Amount",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("Sum",0);
		СтруктураДанных.Вставить("BudgetTypeGuid1C","");
	КонецЕсли;
	
	Если ИмяТипа1С = "Документ.ПоступлениеНаРасчетныйСчет" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("ActivityTypeGuid1C","");
		СтруктураДанных.Вставить("IdPositionBudget","");
		СтруктураДанных.Вставить("ObjectInvestmentGuid1C","");
		СтруктураДанных.Вставить("ArticleCashFlowGuid1C","");
		СтруктураДанных.Вставить("Amount",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("Sum",0);
		СтруктураДанных.Вставить("BudgetTypeGuid1C","");
	КонецЕсли;

	Если ИмяТипа1С = "Документ.ПриходныйКассовыйОрдер" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("ActivityTypeGuid1C","");
		СтруктураДанных.Вставить("IdPositionBudget","");
		СтруктураДанных.Вставить("ObjectInvestmentGuid1C","");
		СтруктураДанных.Вставить("ArticleCashFlowGuid1C","");
		СтруктураДанных.Вставить("Amount",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("Sum",0);
		СтруктураДанных.Вставить("BudgetTypeGuid1C","");
	КонецЕсли;
	
	Если ИмяТипа1С = "Документ.РасходныйКассовыйОрдер" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("ActivityTypeGuid1C","");
		СтруктураДанных.Вставить("IdPositionBudget","");
		СтруктураДанных.Вставить("ObjectInvestmentGuid1C","");
		СтруктураДанных.Вставить("ArticleCashFlowGuid1C","");
		СтруктураДанных.Вставить("Amount",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("Sum",0);
		СтруктураДанных.Вставить("BudgetTypeGuid1C","");
	КонецЕсли;
	
	Возврат  СтруктураДанных;
КонецФункции	

#КонецОбласти

#Область ЗагрузкаСправочников

Процедура ЗагрузитьСправочникиЕФС() экспорт

	СтрПодключения = ПолучитьСтрокуПодключения();
	
	clnConn = Неопределено;
	ConnectionSQL = УстановитьСоединениеSQL(СтрПодключения, clnConn);
	
	ОграничениеТрафика = ПолучитьОграничениеТрафика();
	
	ОрганизацииДляЗагрузки = ПолучитьОрганизацииДляЗагрузки();
	
	// ВАЛЮТЫ
	//ЗагрузитьВалюты(ConnectionSQL, ОграничениеТрафика);
	
	// ДДС
	ЗагрузитьСтатьиДДС(ConnectionSQL, ОграничениеТрафика);
	
	// КСК
	ЗагрузитьКонтрагентов(ConnectionSQL, ОграничениеТрафика);
	
	// ОбъектыИДП
	//ЗагрузитьОбъектыИДП(ConnectionSQL, ОграничениеТрафика);
	
	Для Каждого СтрокаОрг Из ОрганизацииДляЗагрузки Цикл
		
		ЗагрузитьОшибочныеБС(ConnectionSQL, ОграничениеТрафика, СтрокаОрг) ;
		ЗагрузитьБанковскиеСчета(ConnectionSQL, ОграничениеТрафика, СтрокаОрг);
	
	КонецЦикла;
	
	ConnectionSQL.Close();
	
КонецПроцедуры	

#Область ДДС
Процедура ЗагрузитьСтатьиДДС(ConnectionSQL, ОграничениеТрафика)
	Система = Перечисления.пик_СистемыХраненияДанных.CDW;
	ПустОрг = Справочники.Организации.ПустаяСсылка(); 
	ИмяТаблицыСКЛ = "dbo.CashFlowItem" ;
	ИмяТипа1С = "Справочник.СтатьиДвиженияДенежныхСредств";
	
	ТекМаксВерсия = ПолучитьМаксимальнуюВерсию("Справочник.СтатьиДвиженияДенежныхСредств", Система, ПустОрг);
	
	СтруктураДанных = ПолучитьСтруктуруДанныхДДС();
	СтруктураОтбора = Новый Структура("some_text", "Version > "+ТекМаксВерсия);
	СтруктураСортировки = Новый Структура("Version","") ;
	
	КолЗаписей = КолЗаписейСКЛ(ОграничениеТрафика);
	
	ЗаписиДДС = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, СтруктураДанных, СтруктураОтбора, ConnectionSQL, КолЗаписей, СтруктураСортировки); 	
	
	Для Каждого СтрокаЗаписи ИЗ ЗаписиДДС Цикл
		
		ЗагрузитьСтатьюДДС(СтрокаЗаписи, ConnectionSQL, ИмяТаблицыСКЛ, ИмяТипа1С);
		
	КонецЦикла;	
	
	
	
	Если ЗаписиДДС.Количество() > 0 Тогда
		ЗаписатьНовуюМаксВерсию(ИмяТипа1С, Перечисления.пик_СистемыХраненияДанных.CDW, ПустОрг, СтрокаЗаписи.VersionString);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьСтатьюДДС(Запись, ConnectionSQL, ИмяТаблицыСКЛ, ИмяТипа1С);

	Если ТипЗнч(Запись) = Тип("Строка") Тогда 
		Перезагружать = Ложь;
		
		ЗаписиДДС = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, ПолучитьСтруктуруДанныхДДС(), Новый Структура("Id",Запись), ConnectionSQL, , ); 	
		
		Если ЗаписиДДС.Количество() = 0 Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		КонецЕсли;	
		
		ЗаписьДляЗагрузки = ЗаписиДДС[0];
		
	Иначе 
		
		Перезагружать = Истина;
		ЗаписьДляЗагрузки = Запись;
		
	КонецЕсли;	
	
	ТЗДДС = ПоискСправочника(ИмяТипа1С, ЗаписьДляЗагрузки.Guid1C);
	Если ТЗДДС.Количество() >0 Тогда
		Если Перезагружать Тогда 
			ОбъектЗагрузки = ТЗДДС[0].Ссылка.ПолучитьОбъект();
		Иначе
			Возврат ТЗДДС[0].Ссылка;
		КонецЕсли;	
	Иначе
	    Если ЗаписьДляЗагрузки.IsGroup Тогда
			ОбъектЗагрузки = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьГруппу();
		Иначе 
			ОбъектЗагрузки = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		КонецЕсли;	
		ОбъектСсылка = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ЗаписьДляЗагрузки.Guid1C)));
		ОбъектЗагрузки.УстановитьСсылкуНового(ОбъектСсылка);		
	КонецЕсли; 

	// ЗАПОЛНЕНИЕ ПОЛЕЙ
	ОбъектЗагрузки.Наименование = ЗаписьДляЗагрузки.Name;
	ОбъектЗагрузки.Guid = ЗаписьДляЗагрузки.Guid1C;
	ОбъектЗагрузки.Код = ЗаписьДляЗагрузки.IDPItemCode;
	Если ЗаписьДляЗагрузки.ParentId <> "" Тогда
		ОбъектЗагрузки.Родитель = ЗагрузитьСтатьюДДС(ЗаписьДляЗагрузки.ParentId, ConnectionSQL, ИмяТаблицыСКЛ, ИмяТипа1С);	
	КонецЕсли;	
	//
	
	ОбъектЗагрузки.ОбменДанными.Загрузка = истина;
	ОбъектЗагрузки.Записать();
	
	Возврат ОбъектЗагрузки.Ссылка;
	
КонецФункции	

Функция ПолучитьСтруктуруДанныхДДС()
	Возврат	Новый Структура("Name,IsGroup,ParentId,Version,VersionString,Guid1C,IDPItemCode",
		"",0, "","","","");
КонецФункции	

#КонецОбласти

#Область КСК
Процедура ЗагрузитьКонтрагентов(ConnectionSQL, ОграничениеТрафика)
	
	Система = Перечисления.пик_СистемыХраненияДанных.CDW;
	ПустОрг = Справочники.Организации.ПустаяСсылка(); 
	ИмяТаблицыСКЛ = "dbo.Contractor" ;
	ИмяТипа1С = "Справочник.пик_КонтрагентыКонсолидированные";
	
	ТекМаксВерсия = ПолучитьМаксимальнуюВерсию("Справочник.пик_КонтрагентыКонсолидированные", Система, ПустОрг);
	
	СтруктураДанных = ПолучитьСтруктуруДанныхКСК();
	СтруктураОтбора = Новый Структура("some_text", "Version > "+ТекМаксВерсия);
	СтруктураСортировки = Новый Структура("Version","") ;
	
	КолЗаписей = КолЗаписейСКЛ(ОграничениеТрафика);
	
	ЗаписиДДС = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, СтруктураДанных, СтруктураОтбора, ConnectionSQL, КолЗаписей, СтруктураСортировки); 	
	
	Для Каждого СтрокаЗаписи ИЗ ЗаписиДДС Цикл
		
		ЗагрузитьКСК(СтрокаЗаписи, ConnectionSQL, ИмяТаблицыСКЛ, ИмяТипа1С);
		
	КонецЦикла;		
	
	Если ЗаписиДДС.Количество() > 0 Тогда
		ЗаписатьНовуюМаксВерсию(ИмяТипа1С, Перечисления.пик_СистемыХраненияДанных.CDW, ПустОрг, СтрокаЗаписи.VersionString);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьКСК(Запись, ConnectionSQL, ИмяТаблицыСКЛ, ИмяТипа1С);

	Если ТипЗнч(Запись) = Тип("Строка") Тогда 
		Перезагружать = Ложь;
		
		ЗаписиДДС = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, ПолучитьСтруктуруДанныхКСК(), Новый Структура("Guid1C",Запись), ConnectionSQL, , ); 	
		
		Если ЗаписиДДС.Количество() = 0 Тогда
			Возврат Справочники.пик_КонтрагентыКонсолидированные.ПустаяСсылка();
		КонецЕсли;	
		
		ЗаписьДляЗагрузки = ЗаписиДДС[0];
		
	Иначе 
		
		Перезагружать = Истина;
		ЗаписьДляЗагрузки = Запись;
		
	КонецЕсли;	
	
	ТЗДДС = ПоискСправочника(ИмяТипа1С, ЗаписьДляЗагрузки.Guid1C);
	Если ТЗДДС.Количество() >0 Тогда
		Если Перезагружать Тогда 
			ОбъектЗагрузки = ТЗДДС[0].Ссылка.ПолучитьОбъект();
		Иначе
			Возврат ТЗДДС[0].Ссылка;
		КонецЕсли;	
	Иначе
		//Если ЗаписьДляЗагрузки.IsGroup Тогда
		//	ОбъектЗагрузки = Справочники.пик_КонтрагентыКонсолидированные.СоздатьГруппу();
		//Иначе 
			ОбъектЗагрузки = Справочники.пик_КонтрагентыКонсолидированные.СоздатьЭлемент();
		//КонецЕсли;	
		ОбъектСсылка = Справочники.пик_КонтрагентыКонсолидированные.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ЗаписьДляЗагрузки.Guid1C)));
		ОбъектЗагрузки.УстановитьСсылкуНового(ОбъектСсылка);		
	КонецЕсли; 

	// ЗАПОЛНЕНИЕ ПОЛЕЙ
	ОбъектЗагрузки.Наименование = ЗаписьДляЗагрузки.Name;
	ОбъектЗагрузки.Guid = ЗаписьДляЗагрузки.Guid1C;
	ОбъектЗагрузки.ИНН = ЗаписьДляЗагрузки.INN;
	ОбъектЗагрузки.КПП = ЗаписьДляЗагрузки.KPP;
	ОбъектЗагрузки.НаименованиеПолное = ЗаписьДляЗагрузки.FullName;
	ОбъектЗагрузки.АдресФактический = ЗаписьДляЗагрузки.AddressActual;
	ОбъектЗагрузки.АдресЮридический = ЗаписьДляЗагрузки.AddressLegal;
	ОбъектЗагрузки.Код = ЗаписьДляЗагрузки.Code1C;
	ОбъектЗагрузки.ДокументДатаВыдачи = ЗаписьДляЗагрузки.DocumentIssueDate;
	ОбъектЗагрузки.ДокументКемВыдан = ЗаписьДляЗагрузки.DocumentIssuedBy;
	ОбъектЗагрузки.ДокументНомер = ЗаписьДляЗагрузки.DocumentNumber;
	ОбъектЗагрузки.ДокументСерия = ЗаписьДляЗагрузки.DocumentSeries;
	ОбъектЗагрузки.НалоговыйНомер = ЗаписьДляЗагрузки.TaxNumber;
	ОбъектЗагрузки.Обобщенный = ЗаписьДляЗагрузки.IsGeneralized;
	ОбъектЗагрузки.ИП = ЗаписьДляЗагрузки.IsIndividual;
	ОбъектЗагрузки.ДатаРождения = ЗаписьДляЗагрузки.Birthday;
	ОбъектЗагрузки.Фонд = ЗаписьДляЗагрузки.Fund;
	ОбъектЗагрузки.Комментарий = ЗаписьДляЗагрузки.Comment;
	ОбъектЗагрузки.GuidCRM = ЗаписьДляЗагрузки.GuidCRM;
	ОбъектЗагрузки.ДатаНачалаИспользования =  ЗаписьДляЗагрузки.StartDate;
	ОбъектЗагрузки.ДатаОкончанияИспользования =  ЗаписьДляЗагрузки.EndDate;
	
	ТЗВИдДокумента = ПоискСправочника("Справочник.ВидыДокументовФизическихЛиц", ЗаписьДляЗагрузки.DocumentTypeId, "dbo.IndividualDocumentType", ConnectionSQL);
	Если ТЗВИдДокумента.Количество()<>0 Тогда
		ОбъектЗагрузки.ВалютаДокумента = ТЗВИдДокумента[0].Ссылка;
	КонецЕсли;	
	
	ТЗСтрана = ПоискСправочника("Справочник.СтраныМира", ЗаписьДляЗагрузки.CountryId, "dbo.Country", ConnectionSQL);
	Если ТЗСтрана.Количество()<>0 Тогда
		ОбъектЗагрузки.ВалютаДокумента = ТЗСтрана[0].Ссылка;
	КонецЕсли;	
		
	Если ЗаписьДляЗагрузки.MainContractorId <> "" Тогда
		ОбъектЗагрузки.ГоловнойКонтрагент = ЗагрузитьКСК(ЗаписьДляЗагрузки.MainContractorId, ConnectionSQL, ИмяТаблицыСКЛ, ИмяТипа1С);	
	КонецЕсли;	
	//
	
	ОбъектЗагрузки.ОбменДанными.Загрузка = истина;
	ОбъектЗагрузки.Записать();
	
	Возврат ОбъектЗагрузки.Ссылка;
	
КонецФункции	

Функция ПолучитьСтруктуруДанныхКСК()
	
	СтруктураДанных = Новый Структура;	
	
	СтруктураДанных.Вставить("Name","");
	СтруктураДанных.Вставить("FullName","");
	СтруктураДанных.Вставить("MainContractorId","");
	СтруктураДанных.Вставить("INN","");
	СтруктураДанных.Вставить("KPP","");
	СтруктураДанных.Вставить("AddressActual","");
	СтруктураДанных.Вставить("AddressLegal","");
	СтруктураДанных.Вставить("DocumentTypeId",0);
	СтруктураДанных.Вставить("DocumentIssueDate",'00010101');
	СтруктураДанных.Вставить("DocumentIssuedBy","");
	СтруктураДанных.Вставить("DocumentNumber","");
	СтруктураДанных.Вставить("DocumentSeries","");
	СтруктураДанных.Вставить("TaxNumber","");
	СтруктураДанных.Вставить("IsGeneralized",0);
	СтруктураДанных.Вставить("CountryId",0);
	СтруктураДанных.Вставить("Fund",0);
	//СтруктураДанных.Вставить("LegalOrPhysical","");
	СтруктураДанных.Вставить("IsIndividual",0);
	СтруктураДанных.Вставить("Birthday",'00010101');
	СтруктураДанных.Вставить("Comment","");
	СтруктураДанных.Вставить("GuidCRM","");
	СтруктураДанных.Вставить("Guid1C","");
	СтруктураДанных.Вставить("Code1C","");
	//СтруктураДанных.Вставить("AvgScore",0);
	СтруктураДанных.Вставить("StartDate",'00010101');
	СтруктураДанных.Вставить("EndDate",'00010101');
	СтруктураДанных.Вставить("Created",'00010101');
	СтруктураДанных.Вставить("Modified",'00010101');
	СтруктураДанных.Вставить("Deleted",'00010101');
	СтруктураДанных.Вставить("Version","");
	СтруктураДанных.Вставить("VersionString","");
	СтруктураДанных.Вставить("InstanceId","");
	
	Возврат СтруктураДанных;

КонецФункции	

#КонецОбласти

#Область БС
Процедура ЗагрузитьБанковскиеСчета(ConnectionSQL, ОграничениеТрафика, СтрокаОрг)
	
	Система = Перечисления.пик_СистемыХраненияДанных.CDW;
	ПустОрг = Справочники.Организации.ПустаяСсылка(); 
	ИмяТаблицыСКЛ = "dbo.VisibilitySettlementAccountOrganization" ;
	ИмяТипа1С = "РегистрСведений.пик_ВидимостьРасчетныхСчетовПоКомпаниям";
	
	ТекМаксВерсия = ПолучитьМаксимальнуюВерсию(ИмяТипа1С, Система, СтрокаОрг.Организация);
	ЗаписиОРГ = СформироватьиВыполнитьSELECTЗапросSQL("dbo.Company", Новый Структура("Id",0), Новый Структура("Guid1C",СтрокаОрг.Guid), ConnectionSQL); 	
	Если ЗаписиОРГ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	СтруктураДанных = ПолучитьСтруктуруДанныхРСВидимостьБС();
	СтруктураОтбора = Новый Структура("some_text", "Version > "+ТекМаксВерсия + " AND CompanyId ="+ ЗаписиОРГ[0].Id);
	СтруктураСортировки = Новый Структура("Version","") ;
	
	КолЗаписей = КолЗаписейСКЛ(ОграничениеТрафика);
	
	Записи = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, СтруктураДанных, СтруктураОтбора, ConnectionSQL, КолЗаписей, СтруктураСортировки); 	
	
	Для Каждого СтрокаЗаписи ИЗ Записи Цикл
		
		БС = ЗагрузитьБС(СтрокаЗаписи, ConnectionSQL, "dbo.BankAccount", "Справочник.пик_БанковскиеСчетаКонсолидированные", СтрокаОрг);
		
		Если ЗначениеЗаполнено(БС) Тогда 
			МенеджерЗаписиБС = РегистрыСведений.пик_ВидимостьРасчетныхСчетовПоКомпаниям.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписиБС.РасчетныйСчет = БС.Ссылка;
			МенеджерЗаписиБС.Организация = СтрокаОрг.Организация;
			МенеджерЗаписиБС.ДатаОкончания = СтрокаЗаписи.EndDate;
			МенеджерЗаписиБС.ТекстКорреспондента = СтрокаЗаписи.CorrespondentText;
			//МенеджерЗаписиБС.БанкДляРасчетов = СтрокаЗаписи.CorrespondentText;
			МенеджерЗаписиБС.ВсегдаУказыватьКПП = СтрокаЗаписи.AlwaysSpecifyKPP;
			МенеджерЗаписиБС.Период = СтрокаЗаписи.Period;
			МенеджерЗаписиБС.Записать();
		КонецЕсли;
	КонецЦикла;		
	
	Если Записи.Количество() > 0 Тогда
		ЗаписатьНовуюМаксВерсию(ИмяТипа1С, Перечисления.пик_СистемыХраненияДанных.CDW, СтрокаОрг.Организация, СтрокаЗаписи.VersionString);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьБС(Запись, ConnectionSQL, ИмяТаблицыСКЛ, ИмяТипа1С, СтрокаОрг, ЗаписьИзРегистра = Истина);

	Если ЗаписьИзРегистра Тогда
		// передается запись из регистра
		Перезагружать = Истина;
		СтруктураДанных = ПолучитьСтруктуруДанныхБС();
		СтруктураОтбора = Новый Структура("Id", Число(Запись.BankAccountId));
		Система = Перечисления.пик_СистемыХраненияДанных.CDW;
		
		
		ЗаписьБС = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, СтруктураДанных, СтруктураОтбора, ConnectionSQL); 	
		Если ЗаписьБС.Количество() = 0 Тогда 
			Возврат Неопределено;
		КонецЕсли;	
		ЗаписьДляЗагрузки = ЗаписьБС[0];
	иначе
		// передается сразу нужная запись  из таблицы БС
		ЗаписьДляЗагрузки = Запись;
		
	КонецЕсли;
	
	ТЗБС = ПоискСправочника(ИмяТипа1С, ЗаписьДляЗагрузки.Guid1C);
	Если ТЗБС.Количество() >0 Тогда
		ОбъектЗагрузки = ТЗБС[0].Ссылка.ПолучитьОбъект();
	Иначе
		ОбъектЗагрузки = Справочники.пик_БанковскиеСчетаКонсолидированные.СоздатьЭлемент();
		ОбъектСсылка = Справочники.пик_БанковскиеСчетаКонсолидированные.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ЗаписьДляЗагрузки.Guid1C)));
		ОбъектЗагрузки.УстановитьСсылкуНового(ОбъектСсылка);		
	КонецЕсли; 

	// ЗАПОЛНЕНИЕ ПОЛЕЙ
	ОбъектЗагрузки.Наименование = ЗаписьДляЗагрузки.Name;
	ОбъектЗагрузки.Код =  ЗаписьДляЗагрузки.Code1C;
	ОбъектЗагрузки.Guid = ЗаписьДляЗагрузки.Guid1C;
	ОбъектЗагрузки.НомерСчета = ЗаписьДляЗагрузки.AccountNumber;
	ОбъектЗагрузки.Банк = Справочники.Банки.НайтиПоКоду(СокрЛП(ЗаписьДляЗагрузки.Bank));
	ОбъектЗагрузки.Валютный = ЗаписьДляЗагрузки.IsCurrency;
	ОбъектЗагрузки.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду(СокрЛП(ЗаписьДляЗагрузки.Currency));
	ОбъектЗагрузки.НомерИДатаРазрешения = ЗаписьДляЗагрузки.PermitNumberAndDate;
	ОбъектЗагрузки.ДатаОткрытия = ЗаписьДляЗагрузки.OpeningDate;
	ОбъектЗагрузки.ДатаЗакрытия = ЗаписьДляЗагрузки.ClosingDate;
	Если ЗаписьДляЗагрузки.BankForSettlements <> "" Тогда
		ОбъектЗагрузки.БанкДляРасчетов = Справочники.Банки.НайтиПоКоду(СокрЛП(ЗаписьДляЗагрузки.BankForSettlements));
	КонецЕсли;
	ОбъектЗагрузки.ВидСчета = ЗаписьДляЗагрузки.AccountKind;
	ОбъектЗагрузки.ТекстКорреспондента = ЗаписьДляЗагрузки.CorrespondentText;
	ОбъектЗагрузки.ТекстНазначения = ЗаписьДляЗагрузки.AppointmentText;
	ОбъектЗагрузки.МесяцПрописью = ЗаписьДляЗагрузки.Month;
	ОбъектЗагрузки.ВсегдаУказыватьКПП = ЗаписьДляЗагрузки.AlwaysSpecifyKPP;
	//ОбъектЗагрузки.GuidCRM = ЗаписьДляЗагрузки.GuidCRM;
	ОбъектЗагрузки.ДатаНачалаИспользования =  ЗаписьДляЗагрузки.StartDate;
	ОбъектЗагрузки.ДатаОкончанияИспользования =  ЗаписьДляЗагрузки.EndDate;
	
	Если СокрЛП(ЗаписьДляЗагрузки.OwnerType) = "Контрагент" Тогда
		ТЗВладелец = ПоискСправочника("Справочник.пик_КонтрагентыКонсолидированные",  ЗаписьДляЗагрузки.OwnerGuid1C);
		Если ТЗВладелец.Количество() <> 0 Тогда 
			ОбъектЗагрузки.Владелец =  ТЗВладелец[0].Ссылка;
		иначе 
			ЗаписьВРегистрОшибок(Система, ИмяТипа1С, СтрокаОрг.Организация, ЗаписьДляЗагрузки.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден владелец контрагент");
			Возврат Неопределено;
		КонецЕсли;
		ВладелецЛокального = НайтиКонтрагентаПоКонсолидированному(ОбъектЗагрузки.Владелец);
	ИначеЕсли  СокрЛП(ЗаписьДляЗагрузки.OwnerType) = "Организационная единица"	Тогда 
		//ТЗВладелец = ПоискСправочника("Справочник.Организации",  ЗаписьДляЗагрузки.OwnerGuid1C);
		//Если ТЗВладелец.Количество() = 0 Тогда 
		//	ОбъектЗагрузки.Владелец =  ТЗВладелец[0].Ссылка;
		//иначе 
		//	Возврат Неопределено;
		//КонецЕсли;
		ОбъектЗагрузки.Владелец = СтрокаОрг.Организация;
		ВладелецЛокального = ОбъектЗагрузки.Владелец;
	Иначе
		ЗаписьВРегистрОшибок(Система, ИмяТипа1С, СтрокаОрг.Организация, ЗаписьДляЗагрузки.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не указан тип владельца");
		Возврат Неопределено;
	КонецЕсли;		
	//
	
	ОбъектЗагрузки.ОбменДанными.Загрузка = истина;
	ОбъектЗагрузки.Записать();
	
	// загружаем локальный БС
	БСЛокальный = ПолучитьЛокальныйБС(ОбъектЗагрузки.Ссылка,ВладелецЛокального); 
	Если БСЛокальный.Пустая() Тогда 
		ОбъектЗагрузкиЛокал = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Иначе
		ОбъектЗагрузкиЛокал = БСЛокальный.ПолучитьОбъект();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств( ОбъектЗагрузкиЛокал, ОбъектЗагрузки, ,"Родитель,Владелец");
	ОбъектЗагрузкиЛокал.Владелец = ВладелецЛокального;
	ОбъектЗагрузкиЛокал.пик_БанковскиеСчетаКонсолидированные =  ОбъектЗагрузки.Ссылка;
	ОбъектЗагрузкиЛокал.ОбменДанными.Загрузка = истина;
	ОбъектЗагрузкиЛокал.Записать();
	
	Возврат Новый Структура("Ссылка,Id",ОбъектЗагрузки.Ссылка, ЗаписьДляЗагрузки.Id);
КонецФункции	

Процедура ЗагрузитьОшибочныеБС(ConnectionSQL, ОграничениеТрафика, СтрокаОрг)
	
	Система = Перечисления.пик_СистемыХраненияДанных.CDW;
	ИмяТипа1С = "Справочник.пик_БанковскиеСчетаКонсолидированные";
	GuidыОшибочных = ПолучитьЗаписиСОшибками(ИмяТипа1С, Система, СтрокаОрг.Организация, ОграничениеТрафика);
	СтруктураДанныхРСВидимость = ПолучитьСтруктуруДанныхРСВидимостьБС();
	СтруктураДанных = ПолучитьСтруктуруДанныхБС();
	
	ЗаписиОРГ = СформироватьиВыполнитьSELECTЗапросSQL("dbo.Company", Новый Структура("Id",0), Новый Структура("Guid1C",СтрокаОрг.Guid), ConnectionSQL); 	
	Если ЗаписиОРГ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого GuidОш Из GuidыОшибочных Цикл
		СтруктураОтбора = Новый Структура("Guid1C", GuidОш);
		
		УдалитьЗаписьОшибки(ИмяТипа1С, Система, СтрокаОрг.Организация, GuidОш);
		
		ТЗЗаписи  = СформироватьиВыполнитьSELECTЗапросSQL("dbo.BankAccount", СтруктураДанных, СтруктураОтбора, ConnectionSQL, , ); 	
		
		Если ТЗЗаписи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
				
		БС = ЗагрузитьБС(ТЗЗаписи[0], ConnectionSQL, "dbo.BankAccount", "Справочник.пик_БанковскиеСчетаКонсолидированные", СтрокаОрг, Ложь);
		Если ЗначениеЗаполнено(БС) Тогда 
			
			Записи = СформироватьиВыполнитьSELECTЗапросSQL("dbo.VisibilitySettlementAccountOrganization", СтруктураДанныхРСВидимость,
				Новый Структура("BankAccountId,CompanyId", Число(БС.ID),ЗаписиОРГ[0].Id), ConnectionSQL); 	
				
			Если Записи.Количество() = 0 Тогда
				Возврат
			КонецЕсли;
			
			МенеджерЗаписиБС = РегистрыСведений.пик_ВидимостьРасчетныхСчетовПоКомпаниям.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписиБС.РасчетныйСчет = БС.Ссылка;
			МенеджерЗаписиБС.Организация = СтрокаОрг.Организация;
			МенеджерЗаписиБС.ДатаОкончания = Записи[0].EndDate;
			МенеджерЗаписиБС.ТекстКорреспондента = Записи[0].CorrespondentText;
			//МенеджерЗаписиБС.БанкДляРасчетов = СтрокаЗаписи.CorrespondentText;
			МенеджерЗаписиБС.ВсегдаУказыватьКПП = Записи[0].AlwaysSpecifyKPP;
			МенеджерЗаписиБС.Период = Записи[0].Period;
			МенеджерЗаписиБС.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	
	
Функция ПолучитьСтруктуруДанныхРСВидимостьБС()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Id","");
	СтруктураДанных.Вставить("Period",'00010101');
	СтруктураДанных.Вставить("BankId",0);
	СтруктураДанных.Вставить("BankAccountId",0);
	СтруктураДанных.Вставить("CompanyId",0);
	СтруктураДанных.Вставить("CorrespondentText","");
	СтруктураДанных.Вставить("EndDate",'00010101');
	СтруктураДанных.Вставить("AlwaysSpecifyKPP",0);
	СтруктураДанных.Вставить("DownloadError",0);
	СтруктураДанных.Вставить("Created",0);
	СтруктураДанных.Вставить("Modified",0);
	СтруктураДанных.Вставить("Deleted",0);
	СтруктураДанных.Вставить("Version","");
	СтруктураДанных.Вставить("VersionString","");
	Возврат СтруктураДанных;
	
	
КонецФункции	

Функция ПолучитьСтруктуруДанныхБС()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Id",0);
	СтруктураДанных.Вставить("Name","");
	СтруктураДанных.Вставить("AccountNumber","");
	СтруктураДанных.Вставить("BankId",0);
	СтруктураДанных.Вставить("Bank","");
	СтруктураДанных.Вставить("IsCurrency",0);
	СтруктураДанных.Вставить("CurrencyId",0);
	СтруктураДанных.Вставить("Currency","");
	СтруктураДанных.Вставить("PermitNumberAndDate","");
	СтруктураДанных.Вставить("AppointmentText","");
	СтруктураДанных.Вставить("Month","");
	СтруктураДанных.Вставить("Total","");
	СтруктураДанных.Вставить("OpeningDate",'00010101');
	СтруктураДанных.Вставить("ClosingDate",'00010101');
	СтруктураДанных.Вставить("BankForSettlementsId",0);
	СтруктураДанных.Вставить("BankForSettlements","");
	СтруктураДанных.Вставить("AccountKind","");
	СтруктураДанных.Вставить("CorrespondentText","");
	СтруктураДанных.Вставить("AlwaysSpecifyKPP",0);
	СтруктураДанных.Вставить("StartDate",'00010101');
	СтруктураДанных.Вставить("EndDate",'00010101');
	СтруктураДанных.Вставить("DeveloperSpecialAccount",0);
	СтруктураДанных.Вставить("OwnerGuid1C","");
	СтруктураДанных.Вставить("OwnerType","");
	СтруктураДанных.Вставить("Code1C","");
	СтруктураДанных.Вставить("Guid1C","");
	СтруктураДанных.Вставить("Created",'00010101');
	СтруктураДанных.Вставить("Modified",'00010101');
	СтруктураДанных.Вставить("Deleted",'00010101');
	СтруктураДанных.Вставить("Version","");
	СтруктураДанных.Вставить("VersionString","");
	

	Возврат СтруктураДанных;
	
	
КонецФункции	


#КонецОбласти

Процедура ЗагрузитьВалюты(ConnectionSQL, ОграничениеТрафика)
	Система = Перечисления.пик_СистемыХраненияДанных.CDW;
	ПустОрг = Справочники.Организации.ПустаяСсылка(); 
	
	ТекМаксВерсия = ПолучитьМаксимальнуюВерсию("Справочник.Валюты", Система, ПустОрг);
	
	
КонецПроцедуры	

#область КСД

Процедура ЗагрузитьДоговорыВебСервер() Экспорт

	//Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	ЗагрузитьДоговорыКонтрагентов();
	
КонецПроцедуры

Процедура ЗагрузитьДоговорыКонтрагентов() Экспорт
	
	//НастройкаВебСервиса = Справочники.НастройкиВебСервисов.НСИ;
	Прокси = ПолучитьПроксиНСИ();
	
	//КодУзла = ПланыОбмена.бит_РБДПоОрганизациям.ЭтотУзел().Код;
	КодыУзлов = ПолучитьКодыУзлов();
	ВидСправочника = "пик_ДоговорыКонтрагентовКонсолидированные";
	
	Для Каждого КодУзла ИЗ КодыУзлов Цикл 
		СписокДоговоровКонтрагентов = Прокси.ПолучитьСписокДоговоровКонтрагентов(КодУзла);
		СписокРезультатов = ЗаписатьДоговорыКонтрагентов(СписокДоговоровКонтрагентов, Прокси.ФабрикаXDTO, "http://ТУС.ru", ВидСправочника);
		Прокси.УдалитьРегистрациюДоговоровКонтрагентов(КодУзла, СписокРезультатов);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьДоговорыКонтрагентов(СписокДоговоровКонтрагентов, Фабрика, URIПространстваИменСервиса, ВидСправочника)
	
	Ограничение = ПолучитьОграничениеТрафика(); 	
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Guid", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультата.Колонки.Добавить("ВерсияДанных", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультата.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	
	Счетчик = 0;
	Для Каждого ТекДоговор Из СписокДоговоровКонтрагентов.ДоговорКонтрагента Цикл
		Счетчик = Счетчик+1;
		Если Счетчик> Ограничение Тогда
			Прервать;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ТекДоговор.СИД) Тогда
			Продолжить;
		КонецЕсли;
		
		Отказ = Ложь;
		
		ДоговорСсылка = Справочники[ВидСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(ТекДоговор.СИД));
		Если ЗначениеЗаполнено(ДоговорСсылка.ВерсияДанных) Тогда
			ДоговорОбъект = ДоговорСсылка.ПолучитьОбъект();
		Иначе
			ДоговорОбъект = Справочники[ВидСправочника].СоздатьЭлемент();
			ДоговорОбъект.УстановитьСсылкуНового(ДоговорСсылка);
		КонецЕсли;
		
		ДоговорОбъект.Контрагенты.Очистить();
		//ДоговорОбъект.СтатьиИДП_ПервоначальныеДанные.Очистить();
		//ДоговорОбъект.СтатьиОХР_ПервоначальныеДанные.Очистить();
		ДоговорОбъект.Экспорт.Очистить();
		//ДоговорОбъект.ОбъектыИДП.Очистить();
		ДоговорОбъект.СтатьиЗатрат.Очистить();
		//ДоговорОбъект.СтатьиИДП_ТекущиеДанные.Очистить();
		//ДоговорОбъект.СтатьиОХР_ТекущиеДанные.Очистить();
		
		ЗаполнитьЗначенияСвойств(ДоговорОбъект, ТекДоговор,, "Родитель, Владелец, Контрагенты, Экспорт");
		ДоговорОбъект.ПодробныйСтатус = ТекДоговор.ПодробныйСтатусДоговора;
		
		// Заполнение ссылочных реквизитов шапки
		
		Если ВРег(ВидСправочника) = ВРег("пик_ДоговорыКонтрагентовКонсолидированные") Тогда
			
			Если ЗначениеЗаполнено(ТекДоговор.Родитель) Тогда
				ДоговорОбъект.Родитель = Справочники.пик_ДоговорыКонтрагентовКонсолидированные.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекДоговор.Родитель));
				Если Не ЗначениеЗаполнено(ДоговорОбъект.Родитель.ВерсияДанных) Тогда
					Отказ = Истина;
					НоваяСтрока = ТаблицаРезультата.Добавить();
					НоваяСтрока.Guid = ТекДоговор.СИД;
					НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
					НоваяСтрока.ТекстОшибки = "Не найден родитель [" + ТекДоговор.Родитель + "]";
				КонецЕсли;
			Иначе
				ДоговорОбъект.Родитель = Справочники.пик_ДоговорыКонтрагентовКонсолидированные.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекДоговор.ОбъектНедвижимости) Тогда
				ДоговорОбъект.ОбъектНедвижимости = Справочники.пик_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекДоговор.ОбъектНедвижимости));
				Если Не ЗначениеЗаполнено(ДоговорОбъект.ОбъектНедвижимости.ВерсияДанных) Тогда
					Отказ = Истина;
					НоваяСтрока = ТаблицаРезультата.Добавить();
					НоваяСтрока.Guid = ТекДоговор.СИД;
					НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
					НоваяСтрока.ТекстОшибки = "Не найден объект недвижимости [" + ТекДоговор.ОбъектНедвижимости + "]";
				КонецЕсли;
			Иначе
				ДоговорОбъект.ОбъектНедвижимости = Справочники.пик_ОбъектыНедвижимости.ПустаяСсылка();
			КонецЕсли;
		
		//ИначеЕсли ВРег(ВидСправочника) = ВРег("пик_ИсторияДоговоровКонтрагентов") Тогда
		//	
		//	Если ЗначениеЗаполнено(ТекДоговор.Владелец) Тогда
		//		ДоговорОбъект.Владелец = Справочники.пик_ДоговорыКонтрагентовКонсолидированные.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекДоговор.Владелец));
		//		Если Не ЗначениеЗаполнено(ДоговорОбъект.Владелец.ВерсияДанных) Тогда
		//			Отказ = Истина;
		//			НоваяСтрока = ТаблицаРезультата.Добавить();
		//			НоваяСтрока.Guid = ТекДоговор.СИД;
		//			НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
		//			НоваяСтрока.ТекстОшибки = "Не найден владелец [" + ТекДоговор.Владелец + "]";
		//		КонецЕсли;
		//	Иначе
		//		ДоговорОбъект.Владелец = Справочники.пик_ДоговорыКонтрагентовКонсолидированные.ПустаяСсылка();
		//	КонецЕсли;
		//	
		//	Если ЗначениеЗаполнено(ТекДоговор.РодительВладельца) Тогда
		//		ДоговорОбъект.РодительВладельца = Справочники.пик_ДоговорыКонтрагентовКонсолидированные.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекДоговор.РодительВладельца));
		//		Если Не ЗначениеЗаполнено(ДоговорОбъект.РодительВладельца.ВерсияДанных) Тогда
		//			Отказ = Истина;
		//			НоваяСтрока = ТаблицаРезультата.Добавить();
		//			НоваяСтрока.Guid = ТекДоговор.СИД;
		//			НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
		//			НоваяСтрока.ТекстОшибки = "Не найден родитель владельца [" + ТекДоговор.РодительВладельца + "]";
		//		КонецЕсли;
		//	Иначе
		//		ДоговорОбъект.РодительВладельца = Справочники.пик_ДоговорыКонтрагентовКонсолидированные.ПустаяСсылка();
		//	КонецЕсли;
		//	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДоговор.ВидЭлемента) Тогда
			ДоговорОбъект.ВидЭлемента = Перечисления.пик_ВидыЭлементовДоговоровКонтрагентов[ТекДоговор.ВидЭлемента];
		Иначе
			ДоговорОбъект.ВидЭлемента = Перечисления.пик_ВидыЭлементовДоговоровКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДоговор.ТипДоговора) Тогда
			ДоговорОбъект.ТипДоговора = Перечисления.пик_ТипыКСД[ТекДоговор.ТипДоговора];
		Иначе
			ДоговорОбъект.ТипДоговора = Перечисления.пик_ТипыКСД.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДоговор.ТипДопСоглашения) Тогда
			ДоговорОбъект.ТипДопСоглашения = Перечисления.пик_ТипыДопСоглашенийКСД[ТекДоговор.ТипДопСоглашения];
		Иначе
			ДоговорОбъект.ТипДопСоглашения = Перечисления.пик_ТипыДопСоглашенийКСД.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДоговор.СтавкаНДС) Тогда
			ДоговорОбъект.СтавкаНДС = Перечисления.СтавкиНДС[ТекДоговор.СтавкаНДС];
		Иначе
			ДоговорОбъект.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДоговор.ДоговорОсновногоКонтрагента) Тогда
			ДоговорОбъект.ДоговорОсновногоКонтрагента = Справочники.пик_ДоговорыКонтрагентовКонсолидированные.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекДоговор.ДоговорОсновногоКонтрагента));
			Если Не ЗначениеЗаполнено(ДоговорОбъект.ДоговорОсновногоКонтрагента.ВерсияДанных) Тогда
				Отказ = Истина;
				НоваяСтрока = ТаблицаРезультата.Добавить();
				НоваяСтрока.Guid = ТекДоговор.СИД;
				НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
				НоваяСтрока.ТекстОшибки = "Не найден договор основного контрагента [" + ТекДоговор.ДоговорОсновногоКонтрагента + "]";
			КонецЕсли;
		Иначе
			ДоговорОбъект.ДоговорОсновногоКонтрагента = Справочники.пик_ДоговорыКонтрагентовКонсолидированные.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДоговор.ВалютаВзаиморасчетов) Тогда
			ДоговорОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(ТекДоговор.ВалютаВзаиморасчетов);
			Если Не ЗначениеЗаполнено(ДоговорОбъект.ВалютаВзаиморасчетов) Тогда
				Отказ = Истина;
				НоваяСтрока = ТаблицаРезультата.Добавить();
				НоваяСтрока.Guid = ТекДоговор.СИД;
				НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
				НоваяСтрока.ТекстОшибки = "Не найдена валюта взаиморасчетов [" + ТекДоговор.ВалютаВзаиморасчетов + "]";
			КонецЕсли;
		Иначе
			ДоговорОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ТекДоговор.Тендер) Тогда
		//	ДоговорОбъект.Тендер = Справочники.пик_Тендеры.НайтиПоРеквизиту("СИД", ТекДоговор.Тендер);
		//Иначе
		//	ДоговорОбъект.Тендер = Справочники.пик_Тендеры.ПустаяСсылка();
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДоговор.ОсновнойКонтрагент) Тогда
			ДоговорОбъект.ОсновнойКонтрагент = Справочники.пик_КонтрагентыКонсолидированные.НайтиПоРеквизиту("Guid", ТекДоговор.ОсновнойКонтрагент);
			Если Не ЗначениеЗаполнено(ДоговорОбъект.ОсновнойКонтрагент) Тогда
				Отказ = Истина;
				НоваяСтрока = ТаблицаРезультата.Добавить();
				НоваяСтрока.Guid = ТекДоговор.СИД;
				НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
				НоваяСтрока.ТекстОшибки = "Не найден основной контрагент [" + ТекДоговор.ОсновнойКонтрагент + "]";
			КонецЕсли;
		Иначе
			ДоговорОбъект.ОсновнойКонтрагент = Справочники.пик_КонтрагентыКонсолидированные.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДоговор.СделкаCRM) Тогда
			ДоговорОбъект.СделкаCRM = Справочники.crm_Сделки.НайтиПоРеквизиту("GuidCRM", ТекДоговор.СделкаCRM);
			Если Не ЗначениеЗаполнено(ДоговорОбъект.СделкаCRM) Тогда
				Отказ = Истина;
				НоваяСтрока = ТаблицаРезультата.Добавить();
				НоваяСтрока.Guid = ТекДоговор.СИД;
				НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
				НоваяСтрока.ТекстОшибки = "Не найдена сделка CRM [" + ТекДоговор.СделкаCRM + "]";
			КонецЕсли;
		Иначе
			ДоговорОбъект.СделкаCRM = Справочники.crm_Сделки.ПустаяСсылка();
		КонецЕсли;
		
		// Контрагенты
		Для Каждого ТекСтрокаТабЧасти Из ТекДоговор.Контрагенты Цикл
			
			НоваяСтрокаТабЧасти = ДоговорОбъект.Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТабЧасти, ТекСтрокаТабЧасти);
			
			Если ЗначениеЗаполнено(ТекСтрокаТабЧасти.Контрагент) Тогда
				НоваяСтрокаТабЧасти.Контрагент = Справочники.пик_КонтрагентыКонсолидированные.НайтиПоРеквизиту("Guid", ТекСтрокаТабЧасти.Контрагент);
				Если Не ЗначениеЗаполнено(НоваяСтрокаТабЧасти.Контрагент) Тогда
					Отказ = Истина;
					НоваяСтрока = ТаблицаРезультата.Добавить();
					НоваяСтрока.Guid = ТекДоговор.СИД;
					НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
					НоваяСтрока.ТекстОшибки = "Не найден контрагент [" + ТекСтрокаТабЧасти.Контрагент + "]";
				КонецЕсли;
			Иначе
				НоваяСтрокаТабЧасти.Контрагент = Справочники.пик_КонтрагентыКонсолидированные.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрокаТабЧасти.КатегорияДоговора) Тогда
				НоваяСтрокаТабЧасти.КатегорияДоговора = Справочники.пик_КатегорияДоговоровКСД.НайтиПоРеквизиту("GuidDIRECTUM", ТекСтрокаТабЧасти.КатегорияДоговора);
				Если Не ЗначениеЗаполнено(НоваяСтрокаТабЧасти.КатегорияДоговора) Тогда
					Отказ = Истина;
					НоваяСтрока = ТаблицаРезультата.Добавить();
					НоваяСтрока.Guid = ТекДоговор.СИД;
					НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
					НоваяСтрока.ТекстОшибки = "Не найдена категория договора [" + ТекСтрокаТабЧасти.КатегорияДоговора + "]";
				КонецЕсли;
			Иначе
				НоваяСтрокаТабЧасти.КатегорияДоговора = Справочники.пик_КатегорияДоговоровКСД.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;
		
		
		// Экспорт
		Для Каждого ТекСтрокаТабЧасти Из ТекДоговор.Экспорт Цикл
			
			НоваяСтрокаТабЧасти = ДоговорОбъект.Экспорт.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТабЧасти, ТекСтрокаТабЧасти);
			
			Если ЗначениеЗаполнено(ТекСтрокаТабЧасти.Организация) Тогда
				НоваяСтрокаТабЧасти.Организация = Справочники.Организации.НайтиПоРеквизиту("Guid", ТекСтрокаТабЧасти.Организация);
				Если Не ЗначениеЗаполнено(НоваяСтрокаТабЧасти.Организация) Тогда
					Отказ = Истина;
					НоваяСтрока = ТаблицаРезультата.Добавить();
					НоваяСтрока.Guid = ТекДоговор.СИД;
					НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
					НоваяСтрока.ТекстОшибки = "Не найдена организация [" + ТекСтрокаТабЧасти.Организация + "]";
				КонецЕсли;
			Иначе
				НоваяСтрокаТабЧасти.Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрокаТабЧасти.ВидЭлемента) Тогда
				НоваяСтрокаТабЧасти.ВидЭлемента = Перечисления.пик_ВидыЭлементовКСД[ТекСтрокаТабЧасти.ВидЭлемента];
			Иначе
				НоваяСтрокаТабЧасти.ВидЭлемента = Перечисления.пик_ВидыЭлементовКСД.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;
		
				
		// Статьи ИДП - текущие данные
		Для Каждого ТекСтрокаТабЧасти Из ТекДоговор.СтатьиИДП_ТекущиеДанные Цикл
			
			НоваяСтрокаТабЧасти = ДоговорОбъект.СтатьиЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТабЧасти, ТекСтрокаТабЧасти);
			
			Если ЗначениеЗаполнено(ТекСтрокаТабЧасти.ОбъектИДП) Тогда
				НоваяСтрокаТабЧасти.ОбъектИДП = Справочники.пик_ОбъектыИДП.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекСтрокаТабЧасти.ОбъектИДП));
			Иначе
				НоваяСтрокаТабЧасти.ОбъектИДП = Справочники.пик_ОбъектыИДП.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрокаТабЧасти.СтатьяЗатрат) Тогда
				НоваяСтрокаТабЧасти.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоРеквизиту("Guid", ТекСтрокаТабЧасти.СтатьяЗатрат);
				Если Не ЗначениеЗаполнено(НоваяСтрокаТабЧасти.СтатьяЗатрат) Тогда
					Отказ = Истина;
					НоваяСтрока = ТаблицаРезультата.Добавить();
					НоваяСтрока.Guid = ТекДоговор.СИД;
					НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
					НоваяСтрока.ТекстОшибки = "Не найден статья затрат [" + ТекСтрокаТабЧасти.СтатьяЗатрат + "]";
				КонецЕсли;
			Иначе
				НоваяСтрокаТабЧасти.СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрокаТабЧасти.СтавкаНДС) Тогда
				НоваяСтрокаТабЧасти.СтавкаНДС = Перечисления.СтавкиНДС[ТекСтрокаТабЧасти.СтавкаНДС];
			Иначе
				НоваяСтрокаТабЧасти.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;
		
		// Статьи ОХР - текущие данные
		Для Каждого ТекСтрокаТабЧасти Из ТекДоговор.СтатьиОХР_ТекущиеДанные Цикл
			
			НоваяСтрокаТабЧасти = ДоговорОбъект.СтатьиЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТабЧасти, ТекСтрокаТабЧасти);
			
			Если ЗначениеЗаполнено(ТекСтрокаТабЧасти.СтатьяБюджета) Тогда
				НоваяСтрокаТабЧасти.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоРеквизиту("Guid", ТекСтрокаТабЧасти.СтатьяБюджета);
				Если Не ЗначениеЗаполнено(НоваяСтрокаТабЧасти.СтатьяЗатрат) Тогда
					Отказ = Истина;
					НоваяСтрока = ТаблицаРезультата.Добавить();
					НоваяСтрока.Guid = ТекДоговор.СИД;
					НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
					НоваяСтрока.ТекстОшибки = "Не найдена статья бюджета [" + ТекСтрокаТабЧасти.СтатьяБюджета + "]";
				КонецЕсли;
			Иначе
				НоваяСтрокаТабЧасти.СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрокаТабЧасти.СтавкаНДС) Тогда
				НоваяСтрокаТабЧасти.СтавкаНДС = Перечисления.СтавкиНДС[ТекСтрокаТабЧасти.СтавкаНДС];
			Иначе
				НоваяСтрокаТабЧасти.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Отказ Тогда
			Попытка
				ДоговорОбъект.ОбменДанными.Загрузка = Истина;
				ДоговорОбъект.Записать();
				
				НоваяСтрока = ТаблицаРезультата.Добавить();
				НоваяСтрока.Guid = ТекДоговор.СИД;
				НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
				НоваяСтрока.ТекстОшибки = "";
			Исключение
				НоваяСтрока = ТаблицаРезультата.Добавить();
				НоваяСтрока.Guid = ТекДоговор.СИД;
				НоваяСтрока.ВерсияДанных = ТекДоговор.ВерсияДанных;
				НоваяСтрока.ТекстОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	ТипСписокРезультатов = Фабрика.Тип(URIПространстваИменСервиса, "СписокРезультатов");
	ТипРезультат = ТипСписокРезультатов.Свойства.Получить("Результат").Тип;
	СписокРезультатов = Фабрика.Создать(ТипСписокРезультатов);
	
	Для Каждого ТекСтрока Из ТаблицаРезультата Цикл
		ТекРезультат = Фабрика.Создать(ТипРезультат);
		ЗаполнитьЗначенияСвойств(ТекРезультат, ТекСтрока);
		СписокРезультатов.Результат.Добавить(ТекРезультат);
	КонецЦикла;
	
	Возврат СписокРезультатов;
	
КонецФункции



Функция ПолучитьПроксиНСИ()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Адрес","http://app06bux.picompany.ru/TUS_NSI/ws/ТУС.1cws?wsdl");
	СтруктураПараметров.Вставить("Пароль", "auto_789");
	СтруктураПараметров.Вставить("URIПространстваИменСервиса", "http://ТУС.ru");
	СтруктураПараметров.Вставить("ИмяСервиса","Универсальный");
	СтруктураПараметров.Вставить("ИмяТочкиПодключения", "УниверсальныйSoap");
	
	//ЗаполнитьЗначенияСвойств(СтруктураПараметров, НастройкаВебСервиса);
	
	//Пользователь = "ws_" + НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref");     
	Пользователь = "Robot_TUS";
	Пользователь = "ws_tus_RegionInvest";
	СтруктураПараметров.Вставить("Пользователь", Пользователь);
	
	Прокси = ПолучитьWSПрокси(СтруктураПараметров);
	
	Если Прокси = Неопределено Тогда
		
		Попытка
			Каталог = "\\picompany.ru\1cbase\b\Logs\Интеграция ТУС - ТУС-НСИ\";
			СоздатьКаталог(Каталог);
			ЗаписьТекста = Новый ЗаписьТекста;
			ЗаписьТекста.Открыть(Каталог + Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd-HH-mm-ss") + " " + Пользователь);
			ЗаписьТекста.Закрыть();
		Исключение
		КонецПопытки;
		
		Прокси = ПолучитьWSПрокси(СтруктураПараметров);
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ПолучитьWSОпределения(Параметр) Экспорт
	
	WSОпределения = Неопределено;
	Попытка
		WSОпределения = Новый WSОпределения(Параметр.Адрес, Параметр.Пользователь, Параметр.Пароль);
	Исключение
	КонецПопытки;
	
	Возврат WSОпределения;
	
КонецФункции

Функция ПолучитьWSПрокси(Параметр, WSОпределения = Неопределено) Экспорт
	
	WSПрокси = Неопределено;
	Если Не ТипЗнч(WSОпределения) = Тип("WSОпределения") Тогда
		WSОпределения = ПолучитьWSОпределения(Параметр);
	КонецЕсли;
	Если Не WSОпределения = Неопределено Тогда
		Попытка
			WSПрокси = Новый WSПрокси(WSОпределения, Параметр.URIПространстваИменСервиса, Параметр.ИмяСервиса, Параметр.ИмяТочкиПодключения);
			WSПрокси.Пользователь = Параметр.Пользователь;
			WSПрокси.Пароль = Параметр.Пароль;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат WSПрокси;
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область ОперацииCMSSQL

Функция УстановитьСоединениеSQL(СтрПодключения="",clnConn) Экспорт
	
	Если СтрПодключения = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка 
		Если clnConn = Неопределено Тогда 
			clnConn = Новый COMОбъект("ADODB.Connection");
			clnConn.ConnectionTimeOut = 15 ;
			clnConn.CommandTimeout = 500 ;
			clnConn.Open(СтрПодключения);
						
		ИначеЕсли clnConn.State = 0 Тогда	
			clnConn = Новый COMОбъект("ADODB.Connection");
			clnConn.ConnectionTimeOut = 15 ;
			clnConn.CommandTimeout = 500 ;
			clnConn.Open(СтрПодключения);
						
		КонецЕсли;
		Возврат clnConn;
	Исключение
		Возврат clnConn;
	КонецПопытки;	
КонецФункции	

Процедура СформироватьиВыполнитьUPDATEЗапросSQL(ИмяТаблицы,СтруктураДанных,СтруктураОтбора,ConnectSQL) Экспорт
	
	str1="UPDATE "+ИмяТаблицы+" SET ";
	для каждого стр из Структураданных цикл
		Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
			str1 = str1 + "[" + стр.Ключ +"]="+?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+",";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='"+?(стр.Значение=Истина,1,0)+"',";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
			str1 = str1 + "[" + стр.Ключ +"]=" +?(стр.Значение = 0,0,Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0")) + ","; 
		ИначеЕсли стр.Значение = Null Тогда	
			str1 = str1 + "[" + стр.Ключ +"]=Null,";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='"+СтрЗаменить(стр.Значение,"'"," ")+"',";
		Иначе	 
			str1 = str1 + "[" + стр.Ключ +"]='"+стр.Значение+"',";
		КонецЕсли;	
	конеццикла;	 
	str1 = Лев(str1,стрдлина(str1)-1);
	
	str1 = str1 + " WHERE ";
	для каждого стр из СтруктураОтбора цикл
		Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
			str1 = str1 + "[" + стр.Ключ +"]="+?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+" AND ";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='"+?(стр.Значение=Истина,1,0)+"' AND ";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='" + ?(стр.Значение = 0,0,Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0")) + "' AND "; 
		ИначеЕсли стр.Значение = Null Тогда	
			str1 = str1 + "[" + стр.Ключ +"] IS Null AND";
		Иначе	 
			str1 = str1 + "[" + стр.Ключ +"]='"+стр.Значение+"' AND ";
		КонецЕсли;	
	конеццикла;	 
	str1 = Лев(str1,стрдлина(str1)-4);
	ConnectSQL.Execute(str1);
	
КонецПроцедуры

Процедура СформироватьиВыполнитьDELETEЗапросSQL(ИмяТаблицы,Структураданных,ConnectSQL) Экспорт
	
	str1="DELETE FROM "+ИмяТаблицы+" where ";
	для каждого стр из Структураданных цикл
		Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
			str1 = str1 + "[" + стр.Ключ +"]="+?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+" AND ";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='"+?(стр.Значение=Истина,1,0)+"' AND ";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='" + Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0") + "' AND "; 
		ИначеЕсли стр.Значение = Null Тогда	
			str1 = str1 + "[" + стр.Ключ +"] IS Null AND ";
		Иначе	 
			str1 = str1 + "[" + стр.Ключ +"]='"+стр.Значение+"' AND ";
		КонецЕсли;	
	конеццикла;	 
	str1 = Лев(str1,стрдлина(str1)-4);
	ConnectSQL.Execute(str1);
	
КонецПроцедуры

Процедура СформироватьиВыполнитьINSERTЗапросSQL(ИмяТаблицы,Структураданных,ConnectSQL) Экспорт
	
	str_v = "";
	str_f = "";
	для каждого стр из Структураданных цикл
		str_f = str_f + "[" +стр.Ключ+"],";
		Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
			str_v = str_v + ?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+",";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
			str_v = str_v + "'"+?(стр.Значение=Истина,1,0)+"'"+",";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
			str_v = str_v + ?(стр.Значение = 0,0,Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0")) + ","; 
		ИначеЕсли стр.Значение = Null Тогда	
			str_v = str_v + "Null"+",";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") Тогда
			str_v = str_v + "N'"+СтрЗаменить(стр.Значение,"'"," ")+"'"+",";
		Иначе	 
			str_v = str_v + "'"+стр.Значение+"'"+",";
		КонецЕсли;	
	конеццикла;	 
	str_v = Лев(str_v,стрдлина(str_v)-1);
	str_f = Лев(str_f,стрдлина(str_f)-1);
	
	str1="INSERT INTO "+ИмяТаблицы+"("+str_f+") VALUES ("+str_v+")";
	ConnectSQL.Execute(str1);
	
КонецПроцедуры

Функция	СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицы,СтруктураДанных,СтруктураОтбора,ConnectSQL,ДопУсловиеВыбоки="",СтруктураСортировки=Неопределено,СтруктураГруппировки=Неопределено) Экспорт
	Перем РезультатЗапроса;	
	
	str1="SELECT "+ДопУсловиеВыбоки+" ";
	
	РезультатЗапроса = Новый ТаблицаЗначений;
	
	если СтруктураДанных = Неопределено или СтруктураДанных.Количество()=0 Тогда
		str1 = str1 + "*  ";
	иначе	
		для каждого стр из СтруктураДанных цикл
			Если стр.Ключ = "VersionString"  Тогда
				//str1 = str1 + " CONVERT(BINARY(8), [Version]) as VersionString," ;
				str1 = str1 + " CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), [Version]), 1) as VersionString," ;
			//ИначеЕсли стр.Ключ = "VersionString"  Тогда
			//	str1 = str1 + " CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), [Version]), 1) as VersionString," ;
			Иначе
			
				str1 = str1 + "[" + стр.Ключ +"],";
			КонецЕсли;
			//РезультатЗапроса.Колонки.Добавить(стр.Ключ);
		конеццикла;	 
	конецесли;	
	str1 = Лев(str1,стрдлина(str1)-1);
	
	если СтруктураОтбора = Неопределено Тогда
		str1 = str1 + " FROM " + ИмяТаблицы;
	иначе
		str1 = str1 + " FROM " + ИмяТаблицы + " WHERE ";
		ПервПр=ИСтина;
		для каждого стр из СтруктураОтбора цикл
			Если ПервПр=Истина Тогда
				УсловиеСдругими = "";
			Иначе	
				УсловиеСдругими = " AND ";
			КонецЕсли;	
			Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
				str1 = str1 + УсловиеСдругими + "[" +стр.Ключ +"]="+?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+" ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
				str1 = str1 + УсловиеСдругими + "[" +стр.Ключ +"]='"+?(стр.Значение=Истина,1,0)+"' ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
				str1 = str1 + УсловиеСдругими + "[" + стр.Ключ +"]='" + Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0") + "' "; 
			ИначеЕсли стр.Значение = Null Тогда	
				str1 = str1 + УсловиеСдругими + "[" + стр.Ключ +"] IS NULL ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") И стр.Ключ = "bkt_lft" Тогда
				str1 = str1 + " ( ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") И стр.Ключ = "bkt_pgt" Тогда
				str1 = str1 + " ) ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") И стр.Ключ = "some_text" Тогда
				str1 = str1 + " "+стр.Значение+" ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Структура") Тогда
				для каждого влстр из стр.Значение цикл
					Если ПервПр=Истина Тогда
						УсловиеСдругими = "";
					Иначе	
						УсловиеСдругими = стр.Значение["УсловиеСдругими"];
					КонецЕсли;	
					Если ТипЗнч(влстр.Значение) = тип("Дата") Тогда 
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+стр.Значение["ВидСравнения"]+?(ЗначениеЗаполнено(влстр.Значение)=ложь,"Null","convert(datetime,'"+Формат(влстр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+" ";
					ИначеЕсли ТипЗнч(влстр.Значение) = тип("Булево") Тогда
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+стр.Значение["ВидСравнения"]+"'"+?(влстр.Значение=Истина,1,0)+"' ";
					ИначеЕсли ТипЗнч(влстр.Значение) = тип("Число") Тогда
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+стр.Значение["ВидСравнения"]+"'"+ Формат(влстр.Значение,"ЧРД=.; ЧН=; ЧГ=0")+"' ";
					ИначеЕсли влстр.Значение = Null Тогда	
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+?(стр.Значение["ВидСравнения"]="="," IS NULL "," IS NOT NULL ")+" ";
					ИначеЕсли ТипЗнч(влстр.Значение) = тип("Строка") И влстр.Ключ = "bkt_lft" Тогда	
						str1 = str1 + " ( ";
					ИначеЕсли ТипЗнч(влстр.Значение) = тип("Строка") И влстр.Ключ = "bkt_pgt" Тогда	
						str1 = str1 + " ) ";
					Иначе
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+стр.Значение["ВидСравнения"]+"'"+влстр.Значение+"' ";
					КонецЕсли;
					прервать;	
				конеццикла;
			Иначе	 
				str1 = str1 + УсловиеСдругими + "[" +стр.Ключ +"]='"+стр.Значение+"' ";
			КонецЕсли;	
			ПервПр=Ложь;
		конеццикла;	 
		//str1  = Лев(str1,стрдлина(str1)-4);
	конецесли;
	
	если СтруктураСортировки <> Неопределено Тогда
		str1 = str1 + " ORDER BY ";
		для каждого стр из СтруктураСортировки цикл
			str1 = str1 + "[" + стр.Ключ +"] "+стр.Значение+",";
		конеццикла;	 
		str1 = Лев(str1,стрдлина(str1)-1);
	конецесли;	
	
	если СтруктураГруппировки <> Неопределено Тогда
		str1 = str1 + " GROUP BY ";
		для каждого стр из СтруктураГруппировки цикл
			str1 = str1 + "[" + стр.Ключ +"] "+стр.Значение+",";
		конеццикла;	 
		str1 = Лев(str1,стрдлина(str1)-1);
	конецесли;	
	
	Quiry = ConnectSQL.Execute(str1);
	
	count = 0;
	While Quiry.EOF()=False Цикл
		
		если count = 0 тогда
			для каждого стр из СтруктураДанных цикл
				type = Quiry.Fields(стр.Ключ).Type;
				если type = 200 ИЛИ type = 202 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(Quiry.Fields(стр.Ключ).DefinedSize));
				иначеесли  Type = 72   тогда
					ОписаниеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50));
				иначеесли type = 135 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Дата",,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
				иначеесли type = 131 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision,Quiry.Fields(стр.Ключ).NumericScale));
				иначеесли type = 3 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision));
				иначеесли type = 17 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision));
				иначеесли type = 6 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision,4));
				иначеесли type = 5 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision,Quiry.Fields(стр.Ключ).DefinedSize));
				иначеесли type = 201 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(Quiry.Fields(стр.Ключ).NumericScale));
				иначеесли type = 11 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(1));
				иначе	
					ОписаниеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(Quiry.Fields(стр.Ключ).DefinedSize));
				конецесли;	
				РезультатЗапроса.Колонки.Добавить(стр.Ключ, ОписаниеТипа );
			конеццикла;	 
		конецесли;	
		
		count = count + 1;
		
		new_str_kontr = РезультатЗапроса.add();
		
		for Each n in РезультатЗапроса.Columns do 
			new_str_kontr[n.name] 	=	Quiry.Fields(n.name).Value;
			//если ссылка, то убираем фигурные скобки
			Если Quiry.Fields(n.name).Type = 72 Тогда
				new_str_kontr[n.name] 	=	СтрЗаменить(new_str_kontr[n.name], "{", "");
				new_str_kontr[n.name] 	=	СтрЗаменить(new_str_kontr[n.name], "}", "");
			КонецЕсли;	
		enddo;	
		
		Quiry.MoveNext(); 
		
	Enddo;
	
	Если РезультатЗапроса.Количество()=0  Тогда
		Если СтруктураДанных <> Неопределено Тогда 
			для каждого стр из СтруктураДанных цикл
				РезультатЗапроса.Колонки.Добавить(стр.Ключ);
			конеццикла;	 
		Иначе
			
		КонецЕсли;
	КонецЕсли;
	
	возврат РезультатЗапроса;
	
КонецФункции
	
#КонецОбласти

#КонецОбласти






